# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AccountResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_in_whitelist': 'bool',
        'mint_status': 'int',
        'collect_status': 'int',
        'total_gravity': 'str',
        'in_minting_gravity': 'str',
        'minted_gravity': 'str',
        'exchanged_tokens': 'str',
        'exchange_rate': 'str',
        'gravity_escrow_address': 'str',
        'can_collect_tokens': 'str',
        'locked_tokens': 'str'
    }

    attribute_map = {
        'is_in_whitelist': 'is_in_whitelist',
        'mint_status': 'mint_status',
        'collect_status': 'collect_status',
        'total_gravity': 'total_gravity',
        'in_minting_gravity': 'in_minting_gravity',
        'minted_gravity': 'minted_gravity',
        'exchanged_tokens': 'exchanged_tokens',
        'exchange_rate': 'exchange_rate',
        'gravity_escrow_address': 'gravity_escrow_address',
        'can_collect_tokens': 'can_collect_tokens',
        'locked_tokens': 'locked_tokens'
    }

    def __init__(self, is_in_whitelist=None, mint_status=None, collect_status=None, total_gravity=None, in_minting_gravity=None, minted_gravity=None, exchanged_tokens=None, exchange_rate=None, gravity_escrow_address=None, can_collect_tokens=None, locked_tokens=None):  # noqa: E501
        """AccountResponse - a model defined in Swagger"""  # noqa: E501
        self._is_in_whitelist = None
        self._mint_status = None
        self._collect_status = None
        self._total_gravity = None
        self._in_minting_gravity = None
        self._minted_gravity = None
        self._exchanged_tokens = None
        self._exchange_rate = None
        self._gravity_escrow_address = None
        self._can_collect_tokens = None
        self._locked_tokens = None
        self.discriminator = None
        self.is_in_whitelist = is_in_whitelist
        self.mint_status = mint_status
        self.collect_status = collect_status
        self.total_gravity = total_gravity
        self.in_minting_gravity = in_minting_gravity
        self.minted_gravity = minted_gravity
        self.exchanged_tokens = exchanged_tokens
        self.exchange_rate = exchange_rate
        self.gravity_escrow_address = gravity_escrow_address
        self.can_collect_tokens = can_collect_tokens
        self.locked_tokens = locked_tokens

    @property
    def is_in_whitelist(self):
        """Gets the is_in_whitelist of this AccountResponse.  # noqa: E501

        Whether the NewID in whitelist  # noqa: E501

        :return: The is_in_whitelist of this AccountResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_whitelist

    @is_in_whitelist.setter
    def is_in_whitelist(self, is_in_whitelist):
        """Sets the is_in_whitelist of this AccountResponse.

        Whether the NewID in whitelist  # noqa: E501

        :param is_in_whitelist: The is_in_whitelist of this AccountResponse.  # noqa: E501
        :type: bool
        """
        if is_in_whitelist is None:
            raise ValueError("Invalid value for `is_in_whitelist`, must not be `None`")  # noqa: E501

        self._is_in_whitelist = is_in_whitelist

    @property
    def mint_status(self):
        """Gets the mint_status of this AccountResponse.  # noqa: E501

        The mint status  # noqa: E501

        :return: The mint_status of this AccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._mint_status

    @mint_status.setter
    def mint_status(self, mint_status):
        """Sets the mint_status of this AccountResponse.

        The mint status  # noqa: E501

        :param mint_status: The mint_status of this AccountResponse.  # noqa: E501
        :type: int
        """
        if mint_status is None:
            raise ValueError("Invalid value for `mint_status`, must not be `None`")  # noqa: E501

        self._mint_status = mint_status

    @property
    def collect_status(self):
        """Gets the collect_status of this AccountResponse.  # noqa: E501

        The collect status  # noqa: E501

        :return: The collect_status of this AccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._collect_status

    @collect_status.setter
    def collect_status(self, collect_status):
        """Sets the collect_status of this AccountResponse.

        The collect status  # noqa: E501

        :param collect_status: The collect_status of this AccountResponse.  # noqa: E501
        :type: int
        """
        if collect_status is None:
            raise ValueError("Invalid value for `collect_status`, must not be `None`")  # noqa: E501

        self._collect_status = collect_status

    @property
    def total_gravity(self):
        """Gets the total_gravity of this AccountResponse.  # noqa: E501

        The total Gravity  # noqa: E501

        :return: The total_gravity of this AccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_gravity

    @total_gravity.setter
    def total_gravity(self, total_gravity):
        """Sets the total_gravity of this AccountResponse.

        The total Gravity  # noqa: E501

        :param total_gravity: The total_gravity of this AccountResponse.  # noqa: E501
        :type: str
        """
        if total_gravity is None:
            raise ValueError("Invalid value for `total_gravity`, must not be `None`")  # noqa: E501

        self._total_gravity = total_gravity

    @property
    def in_minting_gravity(self):
        """Gets the in_minting_gravity of this AccountResponse.  # noqa: E501

        In minting Gravity  # noqa: E501

        :return: The in_minting_gravity of this AccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._in_minting_gravity

    @in_minting_gravity.setter
    def in_minting_gravity(self, in_minting_gravity):
        """Sets the in_minting_gravity of this AccountResponse.

        In minting Gravity  # noqa: E501

        :param in_minting_gravity: The in_minting_gravity of this AccountResponse.  # noqa: E501
        :type: str
        """
        if in_minting_gravity is None:
            raise ValueError("Invalid value for `in_minting_gravity`, must not be `None`")  # noqa: E501

        self._in_minting_gravity = in_minting_gravity

    @property
    def minted_gravity(self):
        """Gets the minted_gravity of this AccountResponse.  # noqa: E501

        History accumulative minted Gravity  # noqa: E501

        :return: The minted_gravity of this AccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._minted_gravity

    @minted_gravity.setter
    def minted_gravity(self, minted_gravity):
        """Sets the minted_gravity of this AccountResponse.

        History accumulative minted Gravity  # noqa: E501

        :param minted_gravity: The minted_gravity of this AccountResponse.  # noqa: E501
        :type: str
        """
        if minted_gravity is None:
            raise ValueError("Invalid value for `minted_gravity`, must not be `None`")  # noqa: E501

        self._minted_gravity = minted_gravity

    @property
    def exchanged_tokens(self):
        """Gets the exchanged_tokens of this AccountResponse.  # noqa: E501

        History accumulative exchanged tokens  # noqa: E501

        :return: The exchanged_tokens of this AccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._exchanged_tokens

    @exchanged_tokens.setter
    def exchanged_tokens(self, exchanged_tokens):
        """Sets the exchanged_tokens of this AccountResponse.

        History accumulative exchanged tokens  # noqa: E501

        :param exchanged_tokens: The exchanged_tokens of this AccountResponse.  # noqa: E501
        :type: str
        """
        if exchanged_tokens is None:
            raise ValueError("Invalid value for `exchanged_tokens`, must not be `None`")  # noqa: E501

        self._exchanged_tokens = exchanged_tokens

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this AccountResponse.  # noqa: E501

        Exchange rate GRV to NEW  # noqa: E501

        :return: The exchange_rate of this AccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this AccountResponse.

        Exchange rate GRV to NEW  # noqa: E501

        :param exchange_rate: The exchange_rate of this AccountResponse.  # noqa: E501
        :type: str
        """
        if exchange_rate is None:
            raise ValueError("Invalid value for `exchange_rate`, must not be `None`")  # noqa: E501

        self._exchange_rate = exchange_rate

    @property
    def gravity_escrow_address(self):
        """Gets the gravity_escrow_address of this AccountResponse.  # noqa: E501

        Gravity escrow address  # noqa: E501

        :return: The gravity_escrow_address of this AccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._gravity_escrow_address

    @gravity_escrow_address.setter
    def gravity_escrow_address(self, gravity_escrow_address):
        """Sets the gravity_escrow_address of this AccountResponse.

        Gravity escrow address  # noqa: E501

        :param gravity_escrow_address: The gravity_escrow_address of this AccountResponse.  # noqa: E501
        :type: str
        """
        if gravity_escrow_address is None:
            raise ValueError("Invalid value for `gravity_escrow_address`, must not be `None`")  # noqa: E501

        self._gravity_escrow_address = gravity_escrow_address

    @property
    def can_collect_tokens(self):
        """Gets the can_collect_tokens of this AccountResponse.  # noqa: E501

        Can collect NEW amount now  # noqa: E501

        :return: The can_collect_tokens of this AccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._can_collect_tokens

    @can_collect_tokens.setter
    def can_collect_tokens(self, can_collect_tokens):
        """Sets the can_collect_tokens of this AccountResponse.

        Can collect NEW amount now  # noqa: E501

        :param can_collect_tokens: The can_collect_tokens of this AccountResponse.  # noqa: E501
        :type: str
        """
        if can_collect_tokens is None:
            raise ValueError("Invalid value for `can_collect_tokens`, must not be `None`")  # noqa: E501

        self._can_collect_tokens = can_collect_tokens

    @property
    def locked_tokens(self):
        """Gets the locked_tokens of this AccountResponse.  # noqa: E501

        In locking NEW amount now  # noqa: E501

        :return: The locked_tokens of this AccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._locked_tokens

    @locked_tokens.setter
    def locked_tokens(self, locked_tokens):
        """Sets the locked_tokens of this AccountResponse.

        In locking NEW amount now  # noqa: E501

        :param locked_tokens: The locked_tokens of this AccountResponse.  # noqa: E501
        :type: str
        """
        if locked_tokens is None:
            raise ValueError("Invalid value for `locked_tokens`, must not be `None`")  # noqa: E501

        self._locked_tokens = locked_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
