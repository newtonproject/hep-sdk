# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NewforceOfPartnerAndVoterResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'page_id': 'int',
        'page_size': 'int',
        'total_page': 'int',
        'round_data': 'list[RoundData]'
    }

    attribute_map = {
        'address': 'address',
        'page_id': 'page_id',
        'page_size': 'page_size',
        'total_page': 'total_page',
        'round_data': 'round_data'
    }

    def __init__(self, address=None, page_id=None, page_size=None, total_page=None, round_data=None):  # noqa: E501
        """NewforceOfPartnerAndVoterResponse - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._page_id = None
        self._page_size = None
        self._total_page = None
        self._round_data = None
        self.discriminator = None
        self.address = address
        self.page_id = page_id
        self.page_size = page_size
        self.total_page = total_page
        self.round_data = round_data

    @property
    def address(self):
        """Gets the address of this NewforceOfPartnerAndVoterResponse.  # noqa: E501


        :return: The address of this NewforceOfPartnerAndVoterResponse.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this NewforceOfPartnerAndVoterResponse.


        :param address: The address of this NewforceOfPartnerAndVoterResponse.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def page_id(self):
        """Gets the page_id of this NewforceOfPartnerAndVoterResponse.  # noqa: E501


        :return: The page_id of this NewforceOfPartnerAndVoterResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this NewforceOfPartnerAndVoterResponse.


        :param page_id: The page_id of this NewforceOfPartnerAndVoterResponse.  # noqa: E501
        :type: int
        """
        if page_id is None:
            raise ValueError("Invalid value for `page_id`, must not be `None`")  # noqa: E501

        self._page_id = page_id

    @property
    def page_size(self):
        """Gets the page_size of this NewforceOfPartnerAndVoterResponse.  # noqa: E501


        :return: The page_size of this NewforceOfPartnerAndVoterResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this NewforceOfPartnerAndVoterResponse.


        :param page_size: The page_size of this NewforceOfPartnerAndVoterResponse.  # noqa: E501
        :type: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def total_page(self):
        """Gets the total_page of this NewforceOfPartnerAndVoterResponse.  # noqa: E501


        :return: The total_page of this NewforceOfPartnerAndVoterResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_page

    @total_page.setter
    def total_page(self, total_page):
        """Sets the total_page of this NewforceOfPartnerAndVoterResponse.


        :param total_page: The total_page of this NewforceOfPartnerAndVoterResponse.  # noqa: E501
        :type: int
        """
        if total_page is None:
            raise ValueError("Invalid value for `total_page`, must not be `None`")  # noqa: E501

        self._total_page = total_page

    @property
    def round_data(self):
        """Gets the round_data of this NewforceOfPartnerAndVoterResponse.  # noqa: E501


        :return: The round_data of this NewforceOfPartnerAndVoterResponse.  # noqa: E501
        :rtype: list[RoundData]
        """
        return self._round_data

    @round_data.setter
    def round_data(self, round_data):
        """Sets the round_data of this NewforceOfPartnerAndVoterResponse.


        :param round_data: The round_data of this NewforceOfPartnerAndVoterResponse.  # noqa: E501
        :type: list[RoundData]
        """
        if round_data is None:
            raise ValueError("Invalid value for `round_data`, must not be `None`")  # noqa: E501

        self._round_data = round_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewforceOfPartnerAndVoterResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewforceOfPartnerAndVoterResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
