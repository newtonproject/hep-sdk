# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class HistoryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_timestamp': 'int',
        'end_timestamp': 'int',
        'locked_days': 'int',
        'minted_gravity': 'str',
        'locked_tokens': 'str',
        'collected_tokens': 'str'
    }

    attribute_map = {
        'start_timestamp': 'start_timestamp',
        'end_timestamp': 'end_timestamp',
        'locked_days': 'locked_days',
        'minted_gravity': 'minted_gravity',
        'locked_tokens': 'locked_tokens',
        'collected_tokens': 'collected_tokens'
    }

    def __init__(self, start_timestamp=None, end_timestamp=None, locked_days=None, minted_gravity=None, locked_tokens=None, collected_tokens=None):  # noqa: E501
        """HistoryData - a model defined in Swagger"""  # noqa: E501
        self._start_timestamp = None
        self._end_timestamp = None
        self._locked_days = None
        self._minted_gravity = None
        self._locked_tokens = None
        self._collected_tokens = None
        self.discriminator = None
        self.start_timestamp = start_timestamp
        self.end_timestamp = end_timestamp
        self.locked_days = locked_days
        self.minted_gravity = minted_gravity
        self.locked_tokens = locked_tokens
        self.collected_tokens = collected_tokens

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this HistoryData.  # noqa: E501

        Start timestamp  # noqa: E501

        :return: The start_timestamp of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this HistoryData.

        Start timestamp  # noqa: E501

        :param start_timestamp: The start_timestamp of this HistoryData.  # noqa: E501
        :type: int
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")  # noqa: E501

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this HistoryData.  # noqa: E501

        End timestamp  # noqa: E501

        :return: The end_timestamp of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this HistoryData.

        End timestamp  # noqa: E501

        :param end_timestamp: The end_timestamp of this HistoryData.  # noqa: E501
        :type: int
        """
        if end_timestamp is None:
            raise ValueError("Invalid value for `end_timestamp`, must not be `None`")  # noqa: E501

        self._end_timestamp = end_timestamp

    @property
    def locked_days(self):
        """Gets the locked_days of this HistoryData.  # noqa: E501

        Locked days  # noqa: E501

        :return: The locked_days of this HistoryData.  # noqa: E501
        :rtype: int
        """
        return self._locked_days

    @locked_days.setter
    def locked_days(self, locked_days):
        """Sets the locked_days of this HistoryData.

        Locked days  # noqa: E501

        :param locked_days: The locked_days of this HistoryData.  # noqa: E501
        :type: int
        """
        if locked_days is None:
            raise ValueError("Invalid value for `locked_days`, must not be `None`")  # noqa: E501

        self._locked_days = locked_days

    @property
    def minted_gravity(self):
        """Gets the minted_gravity of this HistoryData.  # noqa: E501

        minted gravity  # noqa: E501

        :return: The minted_gravity of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._minted_gravity

    @minted_gravity.setter
    def minted_gravity(self, minted_gravity):
        """Sets the minted_gravity of this HistoryData.

        minted gravity  # noqa: E501

        :param minted_gravity: The minted_gravity of this HistoryData.  # noqa: E501
        :type: str
        """
        if minted_gravity is None:
            raise ValueError("Invalid value for `minted_gravity`, must not be `None`")  # noqa: E501

        self._minted_gravity = minted_gravity

    @property
    def locked_tokens(self):
        """Gets the locked_tokens of this HistoryData.  # noqa: E501

        locked tokens  # noqa: E501

        :return: The locked_tokens of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._locked_tokens

    @locked_tokens.setter
    def locked_tokens(self, locked_tokens):
        """Sets the locked_tokens of this HistoryData.

        locked tokens  # noqa: E501

        :param locked_tokens: The locked_tokens of this HistoryData.  # noqa: E501
        :type: str
        """
        if locked_tokens is None:
            raise ValueError("Invalid value for `locked_tokens`, must not be `None`")  # noqa: E501

        self._locked_tokens = locked_tokens

    @property
    def collected_tokens(self):
        """Gets the collected_tokens of this HistoryData.  # noqa: E501

        tokens that has been collected  # noqa: E501

        :return: The collected_tokens of this HistoryData.  # noqa: E501
        :rtype: str
        """
        return self._collected_tokens

    @collected_tokens.setter
    def collected_tokens(self, collected_tokens):
        """Sets the collected_tokens of this HistoryData.

        tokens that has been collected  # noqa: E501

        :param collected_tokens: The collected_tokens of this HistoryData.  # noqa: E501
        :type: str
        """
        if collected_tokens is None:
            raise ValueError("Invalid value for `collected_tokens`, must not be `None`")  # noqa: E501

        self._collected_tokens = collected_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
