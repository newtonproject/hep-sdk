# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NewForceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'locked_amount': 'str',
        'newforce': 'str',
        'newforce_contrib': 'str',
        'token_amount': 'str',
        'token_contrib': 'str'
    }

    attribute_map = {
        'address': 'address',
        'locked_amount': 'locked_amount',
        'newforce': 'newforce',
        'newforce_contrib': 'newforce_contrib',
        'token_amount': 'token_amount',
        'token_contrib': 'token_contrib'
    }

    def __init__(self, address=None, locked_amount=None, newforce=None, newforce_contrib=None, token_amount=None, token_contrib=None):  # noqa: E501
        """NewForceData - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._locked_amount = None
        self._newforce = None
        self._newforce_contrib = None
        self._token_amount = None
        self._token_contrib = None
        self.discriminator = None
        self.address = address
        self.locked_amount = locked_amount
        self.newforce = newforce
        if newforce_contrib is not None:
            self.newforce_contrib = newforce_contrib
        self.token_amount = token_amount
        if token_contrib is not None:
            self.token_contrib = token_contrib

    @property
    def address(self):
        """Gets the address of this NewForceData.  # noqa: E501


        :return: The address of this NewForceData.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this NewForceData.


        :param address: The address of this NewForceData.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def locked_amount(self):
        """Gets the locked_amount of this NewForceData.  # noqa: E501


        :return: The locked_amount of this NewForceData.  # noqa: E501
        :rtype: str
        """
        return self._locked_amount

    @locked_amount.setter
    def locked_amount(self, locked_amount):
        """Sets the locked_amount of this NewForceData.


        :param locked_amount: The locked_amount of this NewForceData.  # noqa: E501
        :type: str
        """
        if locked_amount is None:
            raise ValueError("Invalid value for `locked_amount`, must not be `None`")  # noqa: E501

        self._locked_amount = locked_amount

    @property
    def newforce(self):
        """Gets the newforce of this NewForceData.  # noqa: E501


        :return: The newforce of this NewForceData.  # noqa: E501
        :rtype: str
        """
        return self._newforce

    @newforce.setter
    def newforce(self, newforce):
        """Sets the newforce of this NewForceData.


        :param newforce: The newforce of this NewForceData.  # noqa: E501
        :type: str
        """
        if newforce is None:
            raise ValueError("Invalid value for `newforce`, must not be `None`")  # noqa: E501

        self._newforce = newforce

    @property
    def newforce_contrib(self):
        """Gets the newforce_contrib of this NewForceData.  # noqa: E501


        :return: The newforce_contrib of this NewForceData.  # noqa: E501
        :rtype: str
        """
        return self._newforce_contrib

    @newforce_contrib.setter
    def newforce_contrib(self, newforce_contrib):
        """Sets the newforce_contrib of this NewForceData.


        :param newforce_contrib: The newforce_contrib of this NewForceData.  # noqa: E501
        :type: str
        """

        self._newforce_contrib = newforce_contrib

    @property
    def token_amount(self):
        """Gets the token_amount of this NewForceData.  # noqa: E501


        :return: The token_amount of this NewForceData.  # noqa: E501
        :rtype: str
        """
        return self._token_amount

    @token_amount.setter
    def token_amount(self, token_amount):
        """Sets the token_amount of this NewForceData.


        :param token_amount: The token_amount of this NewForceData.  # noqa: E501
        :type: str
        """
        if token_amount is None:
            raise ValueError("Invalid value for `token_amount`, must not be `None`")  # noqa: E501

        self._token_amount = token_amount

    @property
    def token_contrib(self):
        """Gets the token_contrib of this NewForceData.  # noqa: E501


        :return: The token_contrib of this NewForceData.  # noqa: E501
        :rtype: str
        """
        return self._token_contrib

    @token_contrib.setter
    def token_contrib(self, token_contrib):
        """Sets the token_contrib of this NewForceData.


        :param token_contrib: The token_contrib of this NewForceData.  # noqa: E501
        :type: str
        """

        self._token_contrib = token_contrib

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewForceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewForceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
