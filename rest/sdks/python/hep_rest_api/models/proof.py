# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Proof(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proof_type': 'str',
        'price_currency': 'str',
        'total_price': 'str',
        'submitter': 'str',
        'orders': 'list[Order]'
    }

    attribute_map = {
        'proof_type': 'proof_type',
        'price_currency': 'price_currency',
        'total_price': 'total_price',
        'submitter': 'submitter',
        'orders': 'orders'
    }

    def __init__(self, proof_type=None, price_currency=None, total_price=None, submitter=None, orders=None):  # noqa: E501
        """Proof - a model defined in Swagger"""  # noqa: E501
        self._proof_type = None
        self._price_currency = None
        self._total_price = None
        self._submitter = None
        self._orders = None
        self.discriminator = None
        self.proof_type = proof_type
        self.price_currency = price_currency
        self.total_price = total_price
        self.submitter = submitter
        self.orders = orders

    @property
    def proof_type(self):
        """Gets the proof_type of this Proof.  # noqa: E501

        The proof type which value is 'order'.  # noqa: E501

        :return: The proof_type of this Proof.  # noqa: E501
        :rtype: str
        """
        return self._proof_type

    @proof_type.setter
    def proof_type(self, proof_type):
        """Sets the proof_type of this Proof.

        The proof type which value is 'order'.  # noqa: E501

        :param proof_type: The proof_type of this Proof.  # noqa: E501
        :type: str
        """
        if proof_type is None:
            raise ValueError("Invalid value for `proof_type`, must not be `None`")  # noqa: E501

        self._proof_type = proof_type

    @property
    def price_currency(self):
        """Gets the price_currency of this Proof.  # noqa: E501

        The symbol of fiat or digital token, such as USD, RMB, NEW,BTC,ETH.  # noqa: E501

        :return: The price_currency of this Proof.  # noqa: E501
        :rtype: str
        """
        return self._price_currency

    @price_currency.setter
    def price_currency(self, price_currency):
        """Sets the price_currency of this Proof.

        The symbol of fiat or digital token, such as USD, RMB, NEW,BTC,ETH.  # noqa: E501

        :param price_currency: The price_currency of this Proof.  # noqa: E501
        :type: str
        """
        if price_currency is None:
            raise ValueError("Invalid value for `price_currency`, must not be `None`")  # noqa: E501

        self._price_currency = price_currency

    @property
    def total_price(self):
        """Gets the total_price of this Proof.  # noqa: E501

        The amount of fiat or digital token, unit is the minimum unit of given fiat or digital token.  # noqa: E501

        :return: The total_price of this Proof.  # noqa: E501
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this Proof.

        The amount of fiat or digital token, unit is the minimum unit of given fiat or digital token.  # noqa: E501

        :param total_price: The total_price of this Proof.  # noqa: E501
        :type: str
        """
        if total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")  # noqa: E501

        self._total_price = total_price

    @property
    def submitter(self):
        """Gets the submitter of this Proof.  # noqa: E501

        The submitter's NewID  # noqa: E501

        :return: The submitter of this Proof.  # noqa: E501
        :rtype: str
        """
        return self._submitter

    @submitter.setter
    def submitter(self, submitter):
        """Sets the submitter of this Proof.

        The submitter's NewID  # noqa: E501

        :param submitter: The submitter of this Proof.  # noqa: E501
        :type: str
        """
        if submitter is None:
            raise ValueError("Invalid value for `submitter`, must not be `None`")  # noqa: E501

        self._submitter = submitter

    @property
    def orders(self):
        """Gets the orders of this Proof.  # noqa: E501


        :return: The orders of this Proof.  # noqa: E501
        :rtype: list[Order]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this Proof.


        :param orders: The orders of this Proof.  # noqa: E501
        :type: list[Order]
        """
        if orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")  # noqa: E501

        self._orders = orders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Proof, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Proof):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
