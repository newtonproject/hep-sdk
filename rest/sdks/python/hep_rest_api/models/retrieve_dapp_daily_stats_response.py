# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RetrieveDappDailyStatsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dapp_id': 'str',
        'total_nf': 'str',
        'total_tokens': 'str'
    }

    attribute_map = {
        'dapp_id': 'dapp_id',
        'total_nf': 'total_nf',
        'total_tokens': 'total_tokens'
    }

    def __init__(self, dapp_id=None, total_nf=None, total_tokens=None):  # noqa: E501
        """RetrieveDappDailyStatsResponse - a model defined in Swagger"""  # noqa: E501
        self._dapp_id = None
        self._total_nf = None
        self._total_tokens = None
        self.discriminator = None
        self.dapp_id = dapp_id
        self.total_nf = total_nf
        self.total_tokens = total_tokens

    @property
    def dapp_id(self):
        """Gets the dapp_id of this RetrieveDappDailyStatsResponse.  # noqa: E501

        The decentralized application ID  # noqa: E501

        :return: The dapp_id of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._dapp_id

    @dapp_id.setter
    def dapp_id(self, dapp_id):
        """Sets the dapp_id of this RetrieveDappDailyStatsResponse.

        The decentralized application ID  # noqa: E501

        :param dapp_id: The dapp_id of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :type: str
        """
        if dapp_id is None:
            raise ValueError("Invalid value for `dapp_id`, must not be `None`")  # noqa: E501

        self._dapp_id = dapp_id

    @property
    def total_nf(self):
        """Gets the total_nf of this RetrieveDappDailyStatsResponse.  # noqa: E501

        The total Newforce  # noqa: E501

        :return: The total_nf of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_nf

    @total_nf.setter
    def total_nf(self, total_nf):
        """Sets the total_nf of this RetrieveDappDailyStatsResponse.

        The total Newforce  # noqa: E501

        :param total_nf: The total_nf of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :type: str
        """
        if total_nf is None:
            raise ValueError("Invalid value for `total_nf`, must not be `None`")  # noqa: E501

        self._total_nf = total_nf

    @property
    def total_tokens(self):
        """Gets the total_tokens of this RetrieveDappDailyStatsResponse.  # noqa: E501

        The total number of tokens  # noqa: E501

        :return: The total_tokens of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_tokens

    @total_tokens.setter
    def total_tokens(self, total_tokens):
        """Sets the total_tokens of this RetrieveDappDailyStatsResponse.

        The total number of tokens  # noqa: E501

        :param total_tokens: The total_tokens of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :type: str
        """
        if total_tokens is None:
            raise ValueError("Invalid value for `total_tokens`, must not be `None`")  # noqa: E501

        self._total_tokens = total_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveDappDailyStatsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveDappDailyStatsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
