# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProofReward(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proof_hash': 'str',
        'proof_item_id': 'str',
        'proof_subitem_id': 'str',
        'reward_tokens': 'str',
        'newid': 'str',
        'newforce': 'str',
        'action': 'str',
        'issue_timestamp': 'int',
        'issue_status': 'str'
    }

    attribute_map = {
        'proof_hash': 'proof_hash',
        'proof_item_id': 'proof_item_id',
        'proof_subitem_id': 'proof_subitem_id',
        'reward_tokens': 'reward_tokens',
        'newid': 'newid',
        'newforce': 'newforce',
        'action': 'action',
        'issue_timestamp': 'issue_timestamp',
        'issue_status': 'issue_status'
    }

    def __init__(self, proof_hash=None, proof_item_id=None, proof_subitem_id=None, reward_tokens=None, newid=None, newforce=None, action=None, issue_timestamp=None, issue_status=None):  # noqa: E501
        """ProofReward - a model defined in Swagger"""  # noqa: E501
        self._proof_hash = None
        self._proof_item_id = None
        self._proof_subitem_id = None
        self._reward_tokens = None
        self._newid = None
        self._newforce = None
        self._action = None
        self._issue_timestamp = None
        self._issue_status = None
        self.discriminator = None
        self.proof_hash = proof_hash
        self.proof_item_id = proof_item_id
        self.proof_subitem_id = proof_subitem_id
        self.reward_tokens = reward_tokens
        self.newid = newid
        self.newforce = newforce
        self.action = action
        self.issue_timestamp = issue_timestamp
        self.issue_status = issue_status

    @property
    def proof_hash(self):
        """Gets the proof_hash of this ProofReward.  # noqa: E501


        :return: The proof_hash of this ProofReward.  # noqa: E501
        :rtype: str
        """
        return self._proof_hash

    @proof_hash.setter
    def proof_hash(self, proof_hash):
        """Sets the proof_hash of this ProofReward.


        :param proof_hash: The proof_hash of this ProofReward.  # noqa: E501
        :type: str
        """
        if proof_hash is None:
            raise ValueError("Invalid value for `proof_hash`, must not be `None`")  # noqa: E501

        self._proof_hash = proof_hash

    @property
    def proof_item_id(self):
        """Gets the proof_item_id of this ProofReward.  # noqa: E501


        :return: The proof_item_id of this ProofReward.  # noqa: E501
        :rtype: str
        """
        return self._proof_item_id

    @proof_item_id.setter
    def proof_item_id(self, proof_item_id):
        """Sets the proof_item_id of this ProofReward.


        :param proof_item_id: The proof_item_id of this ProofReward.  # noqa: E501
        :type: str
        """
        if proof_item_id is None:
            raise ValueError("Invalid value for `proof_item_id`, must not be `None`")  # noqa: E501

        self._proof_item_id = proof_item_id

    @property
    def proof_subitem_id(self):
        """Gets the proof_subitem_id of this ProofReward.  # noqa: E501


        :return: The proof_subitem_id of this ProofReward.  # noqa: E501
        :rtype: str
        """
        return self._proof_subitem_id

    @proof_subitem_id.setter
    def proof_subitem_id(self, proof_subitem_id):
        """Sets the proof_subitem_id of this ProofReward.


        :param proof_subitem_id: The proof_subitem_id of this ProofReward.  # noqa: E501
        :type: str
        """
        if proof_subitem_id is None:
            raise ValueError("Invalid value for `proof_subitem_id`, must not be `None`")  # noqa: E501

        self._proof_subitem_id = proof_subitem_id

    @property
    def reward_tokens(self):
        """Gets the reward_tokens of this ProofReward.  # noqa: E501


        :return: The reward_tokens of this ProofReward.  # noqa: E501
        :rtype: str
        """
        return self._reward_tokens

    @reward_tokens.setter
    def reward_tokens(self, reward_tokens):
        """Sets the reward_tokens of this ProofReward.


        :param reward_tokens: The reward_tokens of this ProofReward.  # noqa: E501
        :type: str
        """
        if reward_tokens is None:
            raise ValueError("Invalid value for `reward_tokens`, must not be `None`")  # noqa: E501

        self._reward_tokens = reward_tokens

    @property
    def newid(self):
        """Gets the newid of this ProofReward.  # noqa: E501


        :return: The newid of this ProofReward.  # noqa: E501
        :rtype: str
        """
        return self._newid

    @newid.setter
    def newid(self, newid):
        """Sets the newid of this ProofReward.


        :param newid: The newid of this ProofReward.  # noqa: E501
        :type: str
        """
        if newid is None:
            raise ValueError("Invalid value for `newid`, must not be `None`")  # noqa: E501

        self._newid = newid

    @property
    def newforce(self):
        """Gets the newforce of this ProofReward.  # noqa: E501


        :return: The newforce of this ProofReward.  # noqa: E501
        :rtype: str
        """
        return self._newforce

    @newforce.setter
    def newforce(self, newforce):
        """Sets the newforce of this ProofReward.


        :param newforce: The newforce of this ProofReward.  # noqa: E501
        :type: str
        """
        if newforce is None:
            raise ValueError("Invalid value for `newforce`, must not be `None`")  # noqa: E501

        self._newforce = newforce

    @property
    def action(self):
        """Gets the action of this ProofReward.  # noqa: E501


        :return: The action of this ProofReward.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ProofReward.


        :param action: The action of this ProofReward.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def issue_timestamp(self):
        """Gets the issue_timestamp of this ProofReward.  # noqa: E501


        :return: The issue_timestamp of this ProofReward.  # noqa: E501
        :rtype: int
        """
        return self._issue_timestamp

    @issue_timestamp.setter
    def issue_timestamp(self, issue_timestamp):
        """Sets the issue_timestamp of this ProofReward.


        :param issue_timestamp: The issue_timestamp of this ProofReward.  # noqa: E501
        :type: int
        """
        if issue_timestamp is None:
            raise ValueError("Invalid value for `issue_timestamp`, must not be `None`")  # noqa: E501

        self._issue_timestamp = issue_timestamp

    @property
    def issue_status(self):
        """Gets the issue_status of this ProofReward.  # noqa: E501


        :return: The issue_status of this ProofReward.  # noqa: E501
        :rtype: str
        """
        return self._issue_status

    @issue_status.setter
    def issue_status(self, issue_status):
        """Sets the issue_status of this ProofReward.


        :param issue_status: The issue_status of this ProofReward.  # noqa: E501
        :type: str
        """
        if issue_status is None:
            raise ValueError("Invalid value for `issue_status`, must not be `None`")  # noqa: E501

        self._issue_status = issue_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProofReward, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProofReward):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
