# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CurrentDataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_timestamp': 'int',
        'end_timestamp': 'int',
        'remaining_days': 'int',
        'locked_days': 'int',
        'minted_days': 'int',
        'collected_tokens': 'str',
        'collect_status': 'int',
        'can_collect_tokens': 'str',
        'in_minting_gravity': 'str',
        'current_minting_stage': 'int',
        'current_collect_stage': 'int',
        'total_minting_stages': 'int',
        'released_tokens': 'str',
        'locked_tokens': 'str',
        'total_mint_amount': 'str',
        'total_exchange_tokens': 'str'
    }

    attribute_map = {
        'start_timestamp': 'start_timestamp',
        'end_timestamp': 'end_timestamp',
        'remaining_days': 'remaining_days',
        'locked_days': 'locked_days',
        'minted_days': 'minted_days',
        'collected_tokens': 'collected_tokens',
        'collect_status': 'collect_status',
        'can_collect_tokens': 'can_collect_tokens',
        'in_minting_gravity': 'in_minting_gravity',
        'current_minting_stage': 'current_minting_stage',
        'current_collect_stage': 'current_collect_stage',
        'total_minting_stages': 'total_minting_stages',
        'released_tokens': 'released_tokens',
        'locked_tokens': 'locked_tokens',
        'total_mint_amount': 'total_mint_amount',
        'total_exchange_tokens': 'total_exchange_tokens'
    }

    def __init__(self, start_timestamp=None, end_timestamp=None, remaining_days=None, locked_days=None, minted_days=None, collected_tokens=None, collect_status=None, can_collect_tokens=None, in_minting_gravity=None, current_minting_stage=None, current_collect_stage=None, total_minting_stages=None, released_tokens=None, locked_tokens=None, total_mint_amount=None, total_exchange_tokens=None):  # noqa: E501
        """CurrentDataResponse - a model defined in Swagger"""  # noqa: E501
        self._start_timestamp = None
        self._end_timestamp = None
        self._remaining_days = None
        self._locked_days = None
        self._minted_days = None
        self._collected_tokens = None
        self._collect_status = None
        self._can_collect_tokens = None
        self._in_minting_gravity = None
        self._current_minting_stage = None
        self._current_collect_stage = None
        self._total_minting_stages = None
        self._released_tokens = None
        self._locked_tokens = None
        self._total_mint_amount = None
        self._total_exchange_tokens = None
        self.discriminator = None
        self.start_timestamp = start_timestamp
        self.end_timestamp = end_timestamp
        self.remaining_days = remaining_days
        self.locked_days = locked_days
        self.minted_days = minted_days
        self.collected_tokens = collected_tokens
        self.collect_status = collect_status
        self.can_collect_tokens = can_collect_tokens
        self.in_minting_gravity = in_minting_gravity
        self.current_minting_stage = current_minting_stage
        self.current_collect_stage = current_collect_stage
        self.total_minting_stages = total_minting_stages
        self.released_tokens = released_tokens
        self.locked_tokens = locked_tokens
        self.total_mint_amount = total_mint_amount
        self.total_exchange_tokens = total_exchange_tokens

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this CurrentDataResponse.  # noqa: E501

        Start timestamp  # noqa: E501

        :return: The start_timestamp of this CurrentDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this CurrentDataResponse.

        Start timestamp  # noqa: E501

        :param start_timestamp: The start_timestamp of this CurrentDataResponse.  # noqa: E501
        :type: int
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")  # noqa: E501

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this CurrentDataResponse.  # noqa: E501

        End timestamp  # noqa: E501

        :return: The end_timestamp of this CurrentDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this CurrentDataResponse.

        End timestamp  # noqa: E501

        :param end_timestamp: The end_timestamp of this CurrentDataResponse.  # noqa: E501
        :type: int
        """
        if end_timestamp is None:
            raise ValueError("Invalid value for `end_timestamp`, must not be `None`")  # noqa: E501

        self._end_timestamp = end_timestamp

    @property
    def remaining_days(self):
        """Gets the remaining_days of this CurrentDataResponse.  # noqa: E501

        Remaining minting days  # noqa: E501

        :return: The remaining_days of this CurrentDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._remaining_days

    @remaining_days.setter
    def remaining_days(self, remaining_days):
        """Sets the remaining_days of this CurrentDataResponse.

        Remaining minting days  # noqa: E501

        :param remaining_days: The remaining_days of this CurrentDataResponse.  # noqa: E501
        :type: int
        """
        if remaining_days is None:
            raise ValueError("Invalid value for `remaining_days`, must not be `None`")  # noqa: E501

        self._remaining_days = remaining_days

    @property
    def locked_days(self):
        """Gets the locked_days of this CurrentDataResponse.  # noqa: E501

        Locked days  # noqa: E501

        :return: The locked_days of this CurrentDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._locked_days

    @locked_days.setter
    def locked_days(self, locked_days):
        """Sets the locked_days of this CurrentDataResponse.

        Locked days  # noqa: E501

        :param locked_days: The locked_days of this CurrentDataResponse.  # noqa: E501
        :type: int
        """
        if locked_days is None:
            raise ValueError("Invalid value for `locked_days`, must not be `None`")  # noqa: E501

        self._locked_days = locked_days

    @property
    def minted_days(self):
        """Gets the minted_days of this CurrentDataResponse.  # noqa: E501

        Minted days  # noqa: E501

        :return: The minted_days of this CurrentDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._minted_days

    @minted_days.setter
    def minted_days(self, minted_days):
        """Sets the minted_days of this CurrentDataResponse.

        Minted days  # noqa: E501

        :param minted_days: The minted_days of this CurrentDataResponse.  # noqa: E501
        :type: int
        """
        if minted_days is None:
            raise ValueError("Invalid value for `minted_days`, must not be `None`")  # noqa: E501

        self._minted_days = minted_days

    @property
    def collected_tokens(self):
        """Gets the collected_tokens of this CurrentDataResponse.  # noqa: E501

        Tokens that has been collected  # noqa: E501

        :return: The collected_tokens of this CurrentDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._collected_tokens

    @collected_tokens.setter
    def collected_tokens(self, collected_tokens):
        """Sets the collected_tokens of this CurrentDataResponse.

        Tokens that has been collected  # noqa: E501

        :param collected_tokens: The collected_tokens of this CurrentDataResponse.  # noqa: E501
        :type: str
        """
        if collected_tokens is None:
            raise ValueError("Invalid value for `collected_tokens`, must not be `None`")  # noqa: E501

        self._collected_tokens = collected_tokens

    @property
    def collect_status(self):
        """Gets the collect_status of this CurrentDataResponse.  # noqa: E501

        Status of mint  # noqa: E501

        :return: The collect_status of this CurrentDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._collect_status

    @collect_status.setter
    def collect_status(self, collect_status):
        """Sets the collect_status of this CurrentDataResponse.

        Status of mint  # noqa: E501

        :param collect_status: The collect_status of this CurrentDataResponse.  # noqa: E501
        :type: int
        """
        if collect_status is None:
            raise ValueError("Invalid value for `collect_status`, must not be `None`")  # noqa: E501

        self._collect_status = collect_status

    @property
    def can_collect_tokens(self):
        """Gets the can_collect_tokens of this CurrentDataResponse.  # noqa: E501

        Tokens that waiting for collected  # noqa: E501

        :return: The can_collect_tokens of this CurrentDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._can_collect_tokens

    @can_collect_tokens.setter
    def can_collect_tokens(self, can_collect_tokens):
        """Sets the can_collect_tokens of this CurrentDataResponse.

        Tokens that waiting for collected  # noqa: E501

        :param can_collect_tokens: The can_collect_tokens of this CurrentDataResponse.  # noqa: E501
        :type: str
        """
        if can_collect_tokens is None:
            raise ValueError("Invalid value for `can_collect_tokens`, must not be `None`")  # noqa: E501

        self._can_collect_tokens = can_collect_tokens

    @property
    def in_minting_gravity(self):
        """Gets the in_minting_gravity of this CurrentDataResponse.  # noqa: E501

        In minting GRV  # noqa: E501

        :return: The in_minting_gravity of this CurrentDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._in_minting_gravity

    @in_minting_gravity.setter
    def in_minting_gravity(self, in_minting_gravity):
        """Sets the in_minting_gravity of this CurrentDataResponse.

        In minting GRV  # noqa: E501

        :param in_minting_gravity: The in_minting_gravity of this CurrentDataResponse.  # noqa: E501
        :type: str
        """
        if in_minting_gravity is None:
            raise ValueError("Invalid value for `in_minting_gravity`, must not be `None`")  # noqa: E501

        self._in_minting_gravity = in_minting_gravity

    @property
    def current_minting_stage(self):
        """Gets the current_minting_stage of this CurrentDataResponse.  # noqa: E501

        Stage of current minting  # noqa: E501

        :return: The current_minting_stage of this CurrentDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._current_minting_stage

    @current_minting_stage.setter
    def current_minting_stage(self, current_minting_stage):
        """Sets the current_minting_stage of this CurrentDataResponse.

        Stage of current minting  # noqa: E501

        :param current_minting_stage: The current_minting_stage of this CurrentDataResponse.  # noqa: E501
        :type: int
        """
        if current_minting_stage is None:
            raise ValueError("Invalid value for `current_minting_stage`, must not be `None`")  # noqa: E501

        self._current_minting_stage = current_minting_stage

    @property
    def current_collect_stage(self):
        """Gets the current_collect_stage of this CurrentDataResponse.  # noqa: E501

        Stage of current collect  # noqa: E501

        :return: The current_collect_stage of this CurrentDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._current_collect_stage

    @current_collect_stage.setter
    def current_collect_stage(self, current_collect_stage):
        """Sets the current_collect_stage of this CurrentDataResponse.

        Stage of current collect  # noqa: E501

        :param current_collect_stage: The current_collect_stage of this CurrentDataResponse.  # noqa: E501
        :type: int
        """
        if current_collect_stage is None:
            raise ValueError("Invalid value for `current_collect_stage`, must not be `None`")  # noqa: E501

        self._current_collect_stage = current_collect_stage

    @property
    def total_minting_stages(self):
        """Gets the total_minting_stages of this CurrentDataResponse.  # noqa: E501

        total stages of minting  # noqa: E501

        :return: The total_minting_stages of this CurrentDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_minting_stages

    @total_minting_stages.setter
    def total_minting_stages(self, total_minting_stages):
        """Sets the total_minting_stages of this CurrentDataResponse.

        total stages of minting  # noqa: E501

        :param total_minting_stages: The total_minting_stages of this CurrentDataResponse.  # noqa: E501
        :type: int
        """
        if total_minting_stages is None:
            raise ValueError("Invalid value for `total_minting_stages`, must not be `None`")  # noqa: E501

        self._total_minting_stages = total_minting_stages

    @property
    def released_tokens(self):
        """Gets the released_tokens of this CurrentDataResponse.  # noqa: E501

        released tokens  # noqa: E501

        :return: The released_tokens of this CurrentDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._released_tokens

    @released_tokens.setter
    def released_tokens(self, released_tokens):
        """Sets the released_tokens of this CurrentDataResponse.

        released tokens  # noqa: E501

        :param released_tokens: The released_tokens of this CurrentDataResponse.  # noqa: E501
        :type: str
        """
        if released_tokens is None:
            raise ValueError("Invalid value for `released_tokens`, must not be `None`")  # noqa: E501

        self._released_tokens = released_tokens

    @property
    def locked_tokens(self):
        """Gets the locked_tokens of this CurrentDataResponse.  # noqa: E501

        locked tokens currently  # noqa: E501

        :return: The locked_tokens of this CurrentDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._locked_tokens

    @locked_tokens.setter
    def locked_tokens(self, locked_tokens):
        """Sets the locked_tokens of this CurrentDataResponse.

        locked tokens currently  # noqa: E501

        :param locked_tokens: The locked_tokens of this CurrentDataResponse.  # noqa: E501
        :type: str
        """
        if locked_tokens is None:
            raise ValueError("Invalid value for `locked_tokens`, must not be `None`")  # noqa: E501

        self._locked_tokens = locked_tokens

    @property
    def total_mint_amount(self):
        """Gets the total_mint_amount of this CurrentDataResponse.  # noqa: E501

        locked GRV of this minting  # noqa: E501

        :return: The total_mint_amount of this CurrentDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_mint_amount

    @total_mint_amount.setter
    def total_mint_amount(self, total_mint_amount):
        """Sets the total_mint_amount of this CurrentDataResponse.

        locked GRV of this minting  # noqa: E501

        :param total_mint_amount: The total_mint_amount of this CurrentDataResponse.  # noqa: E501
        :type: str
        """
        if total_mint_amount is None:
            raise ValueError("Invalid value for `total_mint_amount`, must not be `None`")  # noqa: E501

        self._total_mint_amount = total_mint_amount

    @property
    def total_exchange_tokens(self):
        """Gets the total_exchange_tokens of this CurrentDataResponse.  # noqa: E501

        exchange NEW of this minting  # noqa: E501

        :return: The total_exchange_tokens of this CurrentDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_exchange_tokens

    @total_exchange_tokens.setter
    def total_exchange_tokens(self, total_exchange_tokens):
        """Sets the total_exchange_tokens of this CurrentDataResponse.

        exchange NEW of this minting  # noqa: E501

        :param total_exchange_tokens: The total_exchange_tokens of this CurrentDataResponse.  # noqa: E501
        :type: str
        """
        if total_exchange_tokens is None:
            raise ValueError("Invalid value for `total_exchange_tokens`, must not be `None`")  # noqa: E501

        self._total_exchange_tokens = total_exchange_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentDataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentDataResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
