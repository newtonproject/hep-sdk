# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MintConditionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exchange_rate': 'str',
        'locked_tokens_rate': 'str',
        'locked_tokens_threshold': 'str',
        'mint_formula_constant': 'int',
        'locked_tokens_days_minimum': 'str',
        'minting_gravity_minimum': 'str',
        'minting_gravity_maximum': 'str',
        'gravity_escrow_address': 'str'
    }

    attribute_map = {
        'exchange_rate': 'exchange_rate',
        'locked_tokens_rate': 'locked_tokens_rate',
        'locked_tokens_threshold': 'locked_tokens_threshold',
        'mint_formula_constant': 'mint_formula_constant',
        'locked_tokens_days_minimum': 'locked_tokens_days_minimum',
        'minting_gravity_minimum': 'minting_gravity_minimum',
        'minting_gravity_maximum': 'minting_gravity_maximum',
        'gravity_escrow_address': 'gravity_escrow_address'
    }

    def __init__(self, exchange_rate=None, locked_tokens_rate=None, locked_tokens_threshold=None, mint_formula_constant=None, locked_tokens_days_minimum=None, minting_gravity_minimum=None, minting_gravity_maximum=None, gravity_escrow_address=None):  # noqa: E501
        """MintConditionResponse - a model defined in Swagger"""  # noqa: E501
        self._exchange_rate = None
        self._locked_tokens_rate = None
        self._locked_tokens_threshold = None
        self._mint_formula_constant = None
        self._locked_tokens_days_minimum = None
        self._minting_gravity_minimum = None
        self._minting_gravity_maximum = None
        self._gravity_escrow_address = None
        self.discriminator = None
        self.exchange_rate = exchange_rate
        self.locked_tokens_rate = locked_tokens_rate
        self.locked_tokens_threshold = locked_tokens_threshold
        self.mint_formula_constant = mint_formula_constant
        self.locked_tokens_days_minimum = locked_tokens_days_minimum
        self.minting_gravity_minimum = minting_gravity_minimum
        self.minting_gravity_maximum = minting_gravity_maximum
        self.gravity_escrow_address = gravity_escrow_address

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this MintConditionResponse.  # noqa: E501

        Exchange rate GRV to NEW  # noqa: E501

        :return: The exchange_rate of this MintConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this MintConditionResponse.

        Exchange rate GRV to NEW  # noqa: E501

        :param exchange_rate: The exchange_rate of this MintConditionResponse.  # noqa: E501
        :type: str
        """
        if exchange_rate is None:
            raise ValueError("Invalid value for `exchange_rate`, must not be `None`")  # noqa: E501

        self._exchange_rate = exchange_rate

    @property
    def locked_tokens_rate(self):
        """Gets the locked_tokens_rate of this MintConditionResponse.  # noqa: E501

        The rate of locking tokens when minting GRV  # noqa: E501

        :return: The locked_tokens_rate of this MintConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._locked_tokens_rate

    @locked_tokens_rate.setter
    def locked_tokens_rate(self, locked_tokens_rate):
        """Sets the locked_tokens_rate of this MintConditionResponse.

        The rate of locking tokens when minting GRV  # noqa: E501

        :param locked_tokens_rate: The locked_tokens_rate of this MintConditionResponse.  # noqa: E501
        :type: str
        """
        if locked_tokens_rate is None:
            raise ValueError("Invalid value for `locked_tokens_rate`, must not be `None`")  # noqa: E501

        self._locked_tokens_rate = locked_tokens_rate

    @property
    def locked_tokens_threshold(self):
        """Gets the locked_tokens_threshold of this MintConditionResponse.  # noqa: E501

        The threshold of locked tokens  # noqa: E501

        :return: The locked_tokens_threshold of this MintConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._locked_tokens_threshold

    @locked_tokens_threshold.setter
    def locked_tokens_threshold(self, locked_tokens_threshold):
        """Sets the locked_tokens_threshold of this MintConditionResponse.

        The threshold of locked tokens  # noqa: E501

        :param locked_tokens_threshold: The locked_tokens_threshold of this MintConditionResponse.  # noqa: E501
        :type: str
        """
        if locked_tokens_threshold is None:
            raise ValueError("Invalid value for `locked_tokens_threshold`, must not be `None`")  # noqa: E501

        self._locked_tokens_threshold = locked_tokens_threshold

    @property
    def mint_formula_constant(self):
        """Gets the mint_formula_constant of this MintConditionResponse.  # noqa: E501

        Constant of the locked days formula  # noqa: E501

        :return: The mint_formula_constant of this MintConditionResponse.  # noqa: E501
        :rtype: int
        """
        return self._mint_formula_constant

    @mint_formula_constant.setter
    def mint_formula_constant(self, mint_formula_constant):
        """Sets the mint_formula_constant of this MintConditionResponse.

        Constant of the locked days formula  # noqa: E501

        :param mint_formula_constant: The mint_formula_constant of this MintConditionResponse.  # noqa: E501
        :type: int
        """
        if mint_formula_constant is None:
            raise ValueError("Invalid value for `mint_formula_constant`, must not be `None`")  # noqa: E501

        self._mint_formula_constant = mint_formula_constant

    @property
    def locked_tokens_days_minimum(self):
        """Gets the locked_tokens_days_minimum of this MintConditionResponse.  # noqa: E501

        The minimum locked days  # noqa: E501

        :return: The locked_tokens_days_minimum of this MintConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._locked_tokens_days_minimum

    @locked_tokens_days_minimum.setter
    def locked_tokens_days_minimum(self, locked_tokens_days_minimum):
        """Sets the locked_tokens_days_minimum of this MintConditionResponse.

        The minimum locked days  # noqa: E501

        :param locked_tokens_days_minimum: The locked_tokens_days_minimum of this MintConditionResponse.  # noqa: E501
        :type: str
        """
        if locked_tokens_days_minimum is None:
            raise ValueError("Invalid value for `locked_tokens_days_minimum`, must not be `None`")  # noqa: E501

        self._locked_tokens_days_minimum = locked_tokens_days_minimum

    @property
    def minting_gravity_minimum(self):
        """Gets the minting_gravity_minimum of this MintConditionResponse.  # noqa: E501

        The minimum GRV amount when minting  # noqa: E501

        :return: The minting_gravity_minimum of this MintConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._minting_gravity_minimum

    @minting_gravity_minimum.setter
    def minting_gravity_minimum(self, minting_gravity_minimum):
        """Sets the minting_gravity_minimum of this MintConditionResponse.

        The minimum GRV amount when minting  # noqa: E501

        :param minting_gravity_minimum: The minting_gravity_minimum of this MintConditionResponse.  # noqa: E501
        :type: str
        """
        if minting_gravity_minimum is None:
            raise ValueError("Invalid value for `minting_gravity_minimum`, must not be `None`")  # noqa: E501

        self._minting_gravity_minimum = minting_gravity_minimum

    @property
    def minting_gravity_maximum(self):
        """Gets the minting_gravity_maximum of this MintConditionResponse.  # noqa: E501

        The maximum GRV amount when minting  # noqa: E501

        :return: The minting_gravity_maximum of this MintConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._minting_gravity_maximum

    @minting_gravity_maximum.setter
    def minting_gravity_maximum(self, minting_gravity_maximum):
        """Sets the minting_gravity_maximum of this MintConditionResponse.

        The maximum GRV amount when minting  # noqa: E501

        :param minting_gravity_maximum: The minting_gravity_maximum of this MintConditionResponse.  # noqa: E501
        :type: str
        """
        if minting_gravity_maximum is None:
            raise ValueError("Invalid value for `minting_gravity_maximum`, must not be `None`")  # noqa: E501

        self._minting_gravity_maximum = minting_gravity_maximum

    @property
    def gravity_escrow_address(self):
        """Gets the gravity_escrow_address of this MintConditionResponse.  # noqa: E501

        GRV escrow address  # noqa: E501

        :return: The gravity_escrow_address of this MintConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._gravity_escrow_address

    @gravity_escrow_address.setter
    def gravity_escrow_address(self, gravity_escrow_address):
        """Sets the gravity_escrow_address of this MintConditionResponse.

        GRV escrow address  # noqa: E501

        :param gravity_escrow_address: The gravity_escrow_address of this MintConditionResponse.  # noqa: E501
        :type: str
        """
        if gravity_escrow_address is None:
            raise ValueError("Invalid value for `gravity_escrow_address`, must not be `None`")  # noqa: E501

        self._gravity_escrow_address = gravity_escrow_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MintConditionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MintConditionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
