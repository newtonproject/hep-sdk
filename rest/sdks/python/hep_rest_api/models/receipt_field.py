# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ReceiptField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proof_hash': 'str',
        'proof_status': 'str'
    }

    attribute_map = {
        'proof_hash': 'proof_hash',
        'proof_status': 'proof_status'
    }

    def __init__(self, proof_hash=None, proof_status=None):  # noqa: E501
        """ReceiptField - a model defined in Swagger"""  # noqa: E501
        self._proof_hash = None
        self._proof_status = None
        self.discriminator = None
        self.proof_hash = proof_hash
        self.proof_status = proof_status

    @property
    def proof_hash(self):
        """Gets the proof_hash of this ReceiptField.  # noqa: E501


        :return: The proof_hash of this ReceiptField.  # noqa: E501
        :rtype: str
        """
        return self._proof_hash

    @proof_hash.setter
    def proof_hash(self, proof_hash):
        """Sets the proof_hash of this ReceiptField.


        :param proof_hash: The proof_hash of this ReceiptField.  # noqa: E501
        :type: str
        """
        if proof_hash is None:
            raise ValueError("Invalid value for `proof_hash`, must not be `None`")  # noqa: E501

        self._proof_hash = proof_hash

    @property
    def proof_status(self):
        """Gets the proof_status of this ReceiptField.  # noqa: E501


        :return: The proof_status of this ReceiptField.  # noqa: E501
        :rtype: str
        """
        return self._proof_status

    @proof_status.setter
    def proof_status(self, proof_status):
        """Sets the proof_status of this ReceiptField.


        :param proof_status: The proof_status of this ReceiptField.  # noqa: E501
        :type: str
        """
        if proof_status is None:
            raise ValueError("Invalid value for `proof_status`, must not be `None`")  # noqa: E501

        self._proof_status = proof_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceiptField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceiptField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
