# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NewforceRewardAmountResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_reward': 'str',
        'direct_invite_reward': 'str',
        'indirect_invite_reward': 'str',
        'direct_buy_reward': 'str',
        'indirect_buy_reward': 'str',
        'sale_reward': 'str',
        'locked_for_candidate_reward': 'str',
        'locked_for_voter_reward': 'str'
    }

    attribute_map = {
        'total_reward': 'total_reward',
        'direct_invite_reward': 'direct_invite_reward',
        'indirect_invite_reward': 'indirect_invite_reward',
        'direct_buy_reward': 'direct_buy_reward',
        'indirect_buy_reward': 'indirect_buy_reward',
        'sale_reward': 'sale_reward',
        'locked_for_candidate_reward': 'locked_for_candidate_reward',
        'locked_for_voter_reward': 'locked_for_voter_reward'
    }

    def __init__(self, total_reward=None, direct_invite_reward=None, indirect_invite_reward=None, direct_buy_reward=None, indirect_buy_reward=None, sale_reward=None, locked_for_candidate_reward=None, locked_for_voter_reward=None):  # noqa: E501
        """NewforceRewardAmountResponse - a model defined in Swagger"""  # noqa: E501
        self._total_reward = None
        self._direct_invite_reward = None
        self._indirect_invite_reward = None
        self._direct_buy_reward = None
        self._indirect_buy_reward = None
        self._sale_reward = None
        self._locked_for_candidate_reward = None
        self._locked_for_voter_reward = None
        self.discriminator = None
        self.total_reward = total_reward
        self.direct_invite_reward = direct_invite_reward
        self.indirect_invite_reward = indirect_invite_reward
        self.direct_buy_reward = direct_buy_reward
        self.indirect_buy_reward = indirect_buy_reward
        self.sale_reward = sale_reward
        self.locked_for_candidate_reward = locked_for_candidate_reward
        self.locked_for_voter_reward = locked_for_voter_reward

    @property
    def total_reward(self):
        """Gets the total_reward of this NewforceRewardAmountResponse.  # noqa: E501

        The total reward tokens  # noqa: E501

        :return: The total_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_reward

    @total_reward.setter
    def total_reward(self, total_reward):
        """Sets the total_reward of this NewforceRewardAmountResponse.

        The total reward tokens  # noqa: E501

        :param total_reward: The total_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :type: str
        """
        if total_reward is None:
            raise ValueError("Invalid value for `total_reward`, must not be `None`")  # noqa: E501

        self._total_reward = total_reward

    @property
    def direct_invite_reward(self):
        """Gets the direct_invite_reward of this NewforceRewardAmountResponse.  # noqa: E501

        The reward tokens of direct invitation  # noqa: E501

        :return: The direct_invite_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :rtype: str
        """
        return self._direct_invite_reward

    @direct_invite_reward.setter
    def direct_invite_reward(self, direct_invite_reward):
        """Sets the direct_invite_reward of this NewforceRewardAmountResponse.

        The reward tokens of direct invitation  # noqa: E501

        :param direct_invite_reward: The direct_invite_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :type: str
        """
        if direct_invite_reward is None:
            raise ValueError("Invalid value for `direct_invite_reward`, must not be `None`")  # noqa: E501

        self._direct_invite_reward = direct_invite_reward

    @property
    def indirect_invite_reward(self):
        """Gets the indirect_invite_reward of this NewforceRewardAmountResponse.  # noqa: E501

        The reward tokens of indirect invitation  # noqa: E501

        :return: The indirect_invite_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :rtype: str
        """
        return self._indirect_invite_reward

    @indirect_invite_reward.setter
    def indirect_invite_reward(self, indirect_invite_reward):
        """Sets the indirect_invite_reward of this NewforceRewardAmountResponse.

        The reward tokens of indirect invitation  # noqa: E501

        :param indirect_invite_reward: The indirect_invite_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :type: str
        """
        if indirect_invite_reward is None:
            raise ValueError("Invalid value for `indirect_invite_reward`, must not be `None`")  # noqa: E501

        self._indirect_invite_reward = indirect_invite_reward

    @property
    def direct_buy_reward(self):
        """Gets the direct_buy_reward of this NewforceRewardAmountResponse.  # noqa: E501

        The reward tokens of direct purchase  # noqa: E501

        :return: The direct_buy_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :rtype: str
        """
        return self._direct_buy_reward

    @direct_buy_reward.setter
    def direct_buy_reward(self, direct_buy_reward):
        """Sets the direct_buy_reward of this NewforceRewardAmountResponse.

        The reward tokens of direct purchase  # noqa: E501

        :param direct_buy_reward: The direct_buy_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :type: str
        """
        if direct_buy_reward is None:
            raise ValueError("Invalid value for `direct_buy_reward`, must not be `None`")  # noqa: E501

        self._direct_buy_reward = direct_buy_reward

    @property
    def indirect_buy_reward(self):
        """Gets the indirect_buy_reward of this NewforceRewardAmountResponse.  # noqa: E501

        The reward tokens of indirect purchase  # noqa: E501

        :return: The indirect_buy_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :rtype: str
        """
        return self._indirect_buy_reward

    @indirect_buy_reward.setter
    def indirect_buy_reward(self, indirect_buy_reward):
        """Sets the indirect_buy_reward of this NewforceRewardAmountResponse.

        The reward tokens of indirect purchase  # noqa: E501

        :param indirect_buy_reward: The indirect_buy_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :type: str
        """
        if indirect_buy_reward is None:
            raise ValueError("Invalid value for `indirect_buy_reward`, must not be `None`")  # noqa: E501

        self._indirect_buy_reward = indirect_buy_reward

    @property
    def sale_reward(self):
        """Gets the sale_reward of this NewforceRewardAmountResponse.  # noqa: E501

        The reward tokens of sale  # noqa: E501

        :return: The sale_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :rtype: str
        """
        return self._sale_reward

    @sale_reward.setter
    def sale_reward(self, sale_reward):
        """Sets the sale_reward of this NewforceRewardAmountResponse.

        The reward tokens of sale  # noqa: E501

        :param sale_reward: The sale_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :type: str
        """
        if sale_reward is None:
            raise ValueError("Invalid value for `sale_reward`, must not be `None`")  # noqa: E501

        self._sale_reward = sale_reward

    @property
    def locked_for_candidate_reward(self):
        """Gets the locked_for_candidate_reward of this NewforceRewardAmountResponse.  # noqa: E501

        The reward tokens of locked for community node  # noqa: E501

        :return: The locked_for_candidate_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :rtype: str
        """
        return self._locked_for_candidate_reward

    @locked_for_candidate_reward.setter
    def locked_for_candidate_reward(self, locked_for_candidate_reward):
        """Sets the locked_for_candidate_reward of this NewforceRewardAmountResponse.

        The reward tokens of locked for community node  # noqa: E501

        :param locked_for_candidate_reward: The locked_for_candidate_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :type: str
        """
        if locked_for_candidate_reward is None:
            raise ValueError("Invalid value for `locked_for_candidate_reward`, must not be `None`")  # noqa: E501

        self._locked_for_candidate_reward = locked_for_candidate_reward

    @property
    def locked_for_voter_reward(self):
        """Gets the locked_for_voter_reward of this NewforceRewardAmountResponse.  # noqa: E501

        The reward tokens of locked for vote  # noqa: E501

        :return: The locked_for_voter_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :rtype: str
        """
        return self._locked_for_voter_reward

    @locked_for_voter_reward.setter
    def locked_for_voter_reward(self, locked_for_voter_reward):
        """Sets the locked_for_voter_reward of this NewforceRewardAmountResponse.

        The reward tokens of locked for vote  # noqa: E501

        :param locked_for_voter_reward: The locked_for_voter_reward of this NewforceRewardAmountResponse.  # noqa: E501
        :type: str
        """
        if locked_for_voter_reward is None:
            raise ValueError("Invalid value for `locked_for_voter_reward`, must not be `None`")  # noqa: E501

        self._locked_for_voter_reward = locked_for_voter_reward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewforceRewardAmountResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewforceRewardAmountResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
