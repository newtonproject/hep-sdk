# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SubscribeConditionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reward_pool_balance': 'str',
        'subscription_rate': 'str',
        'subscription_minimum': 'str',
        'subscription_maximum': 'str',
        'gravity_escrow_address': 'str',
        'subscription_bonus_constant': 'str'
    }

    attribute_map = {
        'reward_pool_balance': 'reward_pool_balance',
        'subscription_rate': 'subscription_rate',
        'subscription_minimum': 'subscription_minimum',
        'subscription_maximum': 'subscription_maximum',
        'gravity_escrow_address': 'gravity_escrow_address',
        'subscription_bonus_constant': 'subscription_bonus_constant'
    }

    def __init__(self, reward_pool_balance=None, subscription_rate=None, subscription_minimum=None, subscription_maximum=None, gravity_escrow_address=None, subscription_bonus_constant=None):  # noqa: E501
        """SubscribeConditionResponse - a model defined in Swagger"""  # noqa: E501
        self._reward_pool_balance = None
        self._subscription_rate = None
        self._subscription_minimum = None
        self._subscription_maximum = None
        self._gravity_escrow_address = None
        self._subscription_bonus_constant = None
        self.discriminator = None
        self.reward_pool_balance = reward_pool_balance
        self.subscription_rate = subscription_rate
        self.subscription_minimum = subscription_minimum
        self.subscription_maximum = subscription_maximum
        self.gravity_escrow_address = gravity_escrow_address
        self.subscription_bonus_constant = subscription_bonus_constant

    @property
    def reward_pool_balance(self):
        """Gets the reward_pool_balance of this SubscribeConditionResponse.  # noqa: E501


        :return: The reward_pool_balance of this SubscribeConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._reward_pool_balance

    @reward_pool_balance.setter
    def reward_pool_balance(self, reward_pool_balance):
        """Sets the reward_pool_balance of this SubscribeConditionResponse.


        :param reward_pool_balance: The reward_pool_balance of this SubscribeConditionResponse.  # noqa: E501
        :type: str
        """
        if reward_pool_balance is None:
            raise ValueError("Invalid value for `reward_pool_balance`, must not be `None`")  # noqa: E501

        self._reward_pool_balance = reward_pool_balance

    @property
    def subscription_rate(self):
        """Gets the subscription_rate of this SubscribeConditionResponse.  # noqa: E501


        :return: The subscription_rate of this SubscribeConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_rate

    @subscription_rate.setter
    def subscription_rate(self, subscription_rate):
        """Sets the subscription_rate of this SubscribeConditionResponse.


        :param subscription_rate: The subscription_rate of this SubscribeConditionResponse.  # noqa: E501
        :type: str
        """
        if subscription_rate is None:
            raise ValueError("Invalid value for `subscription_rate`, must not be `None`")  # noqa: E501

        self._subscription_rate = subscription_rate

    @property
    def subscription_minimum(self):
        """Gets the subscription_minimum of this SubscribeConditionResponse.  # noqa: E501


        :return: The subscription_minimum of this SubscribeConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_minimum

    @subscription_minimum.setter
    def subscription_minimum(self, subscription_minimum):
        """Sets the subscription_minimum of this SubscribeConditionResponse.


        :param subscription_minimum: The subscription_minimum of this SubscribeConditionResponse.  # noqa: E501
        :type: str
        """
        if subscription_minimum is None:
            raise ValueError("Invalid value for `subscription_minimum`, must not be `None`")  # noqa: E501

        self._subscription_minimum = subscription_minimum

    @property
    def subscription_maximum(self):
        """Gets the subscription_maximum of this SubscribeConditionResponse.  # noqa: E501


        :return: The subscription_maximum of this SubscribeConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_maximum

    @subscription_maximum.setter
    def subscription_maximum(self, subscription_maximum):
        """Sets the subscription_maximum of this SubscribeConditionResponse.


        :param subscription_maximum: The subscription_maximum of this SubscribeConditionResponse.  # noqa: E501
        :type: str
        """
        if subscription_maximum is None:
            raise ValueError("Invalid value for `subscription_maximum`, must not be `None`")  # noqa: E501

        self._subscription_maximum = subscription_maximum

    @property
    def gravity_escrow_address(self):
        """Gets the gravity_escrow_address of this SubscribeConditionResponse.  # noqa: E501


        :return: The gravity_escrow_address of this SubscribeConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._gravity_escrow_address

    @gravity_escrow_address.setter
    def gravity_escrow_address(self, gravity_escrow_address):
        """Sets the gravity_escrow_address of this SubscribeConditionResponse.


        :param gravity_escrow_address: The gravity_escrow_address of this SubscribeConditionResponse.  # noqa: E501
        :type: str
        """
        if gravity_escrow_address is None:
            raise ValueError("Invalid value for `gravity_escrow_address`, must not be `None`")  # noqa: E501

        self._gravity_escrow_address = gravity_escrow_address

    @property
    def subscription_bonus_constant(self):
        """Gets the subscription_bonus_constant of this SubscribeConditionResponse.  # noqa: E501


        :return: The subscription_bonus_constant of this SubscribeConditionResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_bonus_constant

    @subscription_bonus_constant.setter
    def subscription_bonus_constant(self, subscription_bonus_constant):
        """Sets the subscription_bonus_constant of this SubscribeConditionResponse.


        :param subscription_bonus_constant: The subscription_bonus_constant of this SubscribeConditionResponse.  # noqa: E501
        :type: str
        """
        if subscription_bonus_constant is None:
            raise ValueError("Invalid value for `subscription_bonus_constant`, must not be `None`")  # noqa: E501

        self._subscription_bonus_constant = subscription_bonus_constant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscribeConditionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscribeConditionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
