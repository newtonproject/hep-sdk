# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NewforceDailyStatsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nf_new': 'str',
        'nf_cny': 'str',
        'nf_usd': 'str',
        'gnf': 'str'
    }

    attribute_map = {
        'nf_new': 'nf_new',
        'nf_cny': 'nf_cny',
        'nf_usd': 'nf_usd',
        'gnf': 'gnf'
    }

    def __init__(self, nf_new=None, nf_cny=None, nf_usd=None, gnf=None):  # noqa: E501
        """NewforceDailyStatsResponse - a model defined in Swagger"""  # noqa: E501
        self._nf_new = None
        self._nf_cny = None
        self._nf_usd = None
        self._gnf = None
        self.discriminator = None
        self.nf_new = nf_new
        self.nf_cny = nf_cny
        self.nf_usd = nf_usd
        self.gnf = gnf

    @property
    def nf_new(self):
        """Gets the nf_new of this NewforceDailyStatsResponse.  # noqa: E501

        The conversion rate between NewForce(NF) and NEW  # noqa: E501

        :return: The nf_new of this NewforceDailyStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._nf_new

    @nf_new.setter
    def nf_new(self, nf_new):
        """Sets the nf_new of this NewforceDailyStatsResponse.

        The conversion rate between NewForce(NF) and NEW  # noqa: E501

        :param nf_new: The nf_new of this NewforceDailyStatsResponse.  # noqa: E501
        :type: str
        """
        if nf_new is None:
            raise ValueError("Invalid value for `nf_new`, must not be `None`")  # noqa: E501

        self._nf_new = nf_new

    @property
    def nf_cny(self):
        """Gets the nf_cny of this NewforceDailyStatsResponse.  # noqa: E501

        The conversion rate between NewForce(NF) and CNY  # noqa: E501

        :return: The nf_cny of this NewforceDailyStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._nf_cny

    @nf_cny.setter
    def nf_cny(self, nf_cny):
        """Sets the nf_cny of this NewforceDailyStatsResponse.

        The conversion rate between NewForce(NF) and CNY  # noqa: E501

        :param nf_cny: The nf_cny of this NewforceDailyStatsResponse.  # noqa: E501
        :type: str
        """
        if nf_cny is None:
            raise ValueError("Invalid value for `nf_cny`, must not be `None`")  # noqa: E501

        self._nf_cny = nf_cny

    @property
    def nf_usd(self):
        """Gets the nf_usd of this NewforceDailyStatsResponse.  # noqa: E501

        The conversion rate between NewForce(NF) and USD  # noqa: E501

        :return: The nf_usd of this NewforceDailyStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._nf_usd

    @nf_usd.setter
    def nf_usd(self, nf_usd):
        """Sets the nf_usd of this NewforceDailyStatsResponse.

        The conversion rate between NewForce(NF) and USD  # noqa: E501

        :param nf_usd: The nf_usd of this NewforceDailyStatsResponse.  # noqa: E501
        :type: str
        """
        if nf_usd is None:
            raise ValueError("Invalid value for `nf_usd`, must not be `None`")  # noqa: E501

        self._nf_usd = nf_usd

    @property
    def gnf(self):
        """Gets the gnf of this NewforceDailyStatsResponse.  # noqa: E501

        The global NewForce  # noqa: E501

        :return: The gnf of this NewforceDailyStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._gnf

    @gnf.setter
    def gnf(self, gnf):
        """Sets the gnf of this NewforceDailyStatsResponse.

        The global NewForce  # noqa: E501

        :param gnf: The gnf of this NewforceDailyStatsResponse.  # noqa: E501
        :type: str
        """
        if gnf is None:
            raise ValueError("Invalid value for `gnf`, must not be `None`")  # noqa: E501

        self._gnf = gnf

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewforceDailyStatsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewforceDailyStatsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
