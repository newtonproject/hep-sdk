<?php
/**
 * RestApi
 * PHP version 5
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HEP REST API
 *
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HepRestApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use HepRestApi\ApiException;
use HepRestApi\Configuration;
use HepRestApi\HeaderSelector;
use HepRestApi\ObjectSerializer;

/**
 * RestApi Class Doc Comment
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RestApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restDappsRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $dapp_id dapp_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\Dapp
     */
    public function restDappsRead($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restDappsReadWithHttpInfo($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restDappsReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\Dapp, HTTP status code, HTTP response headers (array of strings)
     */
    public function restDappsReadWithHttpInfo($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\Dapp';
        $request = $this->restDappsReadRequest($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\Dapp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restDappsReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restDappsReadAsync($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restDappsReadAsyncWithHttpInfo($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restDappsReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restDappsReadAsyncWithHttpInfo($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\Dapp';
        $request = $this->restDappsReadRequest($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restDappsRead'
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restDappsReadRequest($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restDappsRead'
            );
        }
        // verify the required parameter 'dapp_id' is set
        if ($dapp_id === null || (is_array($dapp_id) && count($dapp_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_id when calling restDappsRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restDappsRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restDappsRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restDappsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restDappsRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restDappsRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restDappsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restDappsRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restDappsRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restDappsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restDappsRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restDappsRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restDappsRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restDappsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restDappsRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restDappsRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restDappsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restDappsRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restDappsRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restDappsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restDappsRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restDappsRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restDappsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restDappsRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restDappsRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restDappsRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/dapps/{dapp_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($dapp_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dapp_id' . '}',
                ObjectSerializer::toPathValue($dapp_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restDappsRead_0
     *
     * @param  string $api_version api_version (required)
     * @param  string $dapp_id dapp_id (required)
     * @param  string $date date (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\RetrieveDappDailyStatsResponse
     */
    public function restDappsRead_0($api_version, $dapp_id, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restDappsRead_0WithHttpInfo($api_version, $dapp_id, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restDappsRead_0WithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $date (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\RetrieveDappDailyStatsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restDappsRead_0WithHttpInfo($api_version, $dapp_id, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\RetrieveDappDailyStatsResponse';
        $request = $this->restDappsRead_0Request($api_version, $dapp_id, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\RetrieveDappDailyStatsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restDappsRead_0Async
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $date (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restDappsRead_0Async($api_version, $dapp_id, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restDappsRead_0AsyncWithHttpInfo($api_version, $dapp_id, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restDappsRead_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $date (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restDappsRead_0AsyncWithHttpInfo($api_version, $dapp_id, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\RetrieveDappDailyStatsResponse';
        $request = $this->restDappsRead_0Request($api_version, $dapp_id, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restDappsRead_0'
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $date (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restDappsRead_0Request($api_version, $dapp_id, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restDappsRead_0'
            );
        }
        // verify the required parameter 'dapp_id' is set
        if ($dapp_id === null || (is_array($dapp_id) && count($dapp_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_id when calling restDappsRead_0'
            );
        }
        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling restDappsRead_0'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restDappsRead_0'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restDappsRead_0, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restDappsRead_0, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restDappsRead_0'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restDappsRead_0, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restDappsRead_0, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restDappsRead_0'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restDappsRead_0, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restDappsRead_0, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restDappsRead_0'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restDappsRead_0'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restDappsRead_0, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restDappsRead_0, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restDappsRead_0'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restDappsRead_0, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restDappsRead_0, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restDappsRead_0'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restDappsRead_0, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restDappsRead_0, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restDappsRead_0'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restDappsRead_0, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restDappsRead_0, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restDappsRead_0'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restDappsRead_0, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restDappsRead_0, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/dapps/{dapp_id}/{date}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($dapp_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dapp_id' . '}',
                ObjectSerializer::toPathValue($dapp_id),
                $resourcePath
            );
        }
        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                '{' . 'date' . '}',
                ObjectSerializer::toPathValue($date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restHealthList
     *
     * @param  string $api_version api_version (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restHealthList($api_version)
    {
        $this->restHealthListWithHttpInfo($api_version);
    }

    /**
     * Operation restHealthListWithHttpInfo
     *
     * @param  string $api_version (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restHealthListWithHttpInfo($api_version)
    {
        $returnType = '';
        $request = $this->restHealthListRequest($api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restHealthListAsync
     *
     * 
     *
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restHealthListAsync($api_version)
    {
        return $this->restHealthListAsyncWithHttpInfo($api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restHealthListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restHealthListAsyncWithHttpInfo($api_version)
    {
        $returnType = '';
        $request = $this->restHealthListRequest($api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restHealthList'
     *
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restHealthListRequest($api_version)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restHealthList'
            );
        }

        $resourcePath = '/rest/v{api_version}/health/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewchainCoinGravityAccountRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $newid newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\AccountResponse
     */
    public function restNewchainCoinGravityAccountRead($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewchainCoinGravityAccountReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewchainCoinGravityAccountReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\AccountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewchainCoinGravityAccountReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\AccountResponse';
        $request = $this->restNewchainCoinGravityAccountReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\AccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewchainCoinGravityAccountReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityAccountReadAsync($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewchainCoinGravityAccountReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewchainCoinGravityAccountReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityAccountReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\AccountResponse';
        $request = $this->restNewchainCoinGravityAccountReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewchainCoinGravityAccountRead'
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewchainCoinGravityAccountReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewchainCoinGravityAccountRead'
            );
        }
        // verify the required parameter 'newid' is set
        if ($newid === null || (is_array($newid) && count($newid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newid when calling restNewchainCoinGravityAccountRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewchainCoinGravityAccountRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewchainCoinGravityAccountRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewchainCoinGravityAccountRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewchainCoinGravityAccountRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewchainCoinGravityAccountRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewchainCoinGravityAccountRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewchainCoinGravityAccountRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewchainCoinGravityAccountRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewchainCoinGravityAccountRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewchainCoinGravityAccountRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewchainCoinGravityAccountRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewchainCoinGravityAccountRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewchainCoinGravityAccountRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewchainCoinGravityAccountRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewchainCoinGravityAccountRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewchainCoinGravityAccountRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewchainCoinGravityAccountRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewchainCoinGravityAccountRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewchainCoinGravityAccountRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewchainCoinGravityAccountRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewchainCoinGravityAccountRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewchainCoinGravityAccountRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewchainCoinGravityAccountRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewchainCoinGravityAccountRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewchainCoinGravityAccountRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newchain/coin/gravity/account/{newid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($newid !== null) {
            $resourcePath = str_replace(
                '{' . 'newid' . '}',
                ObjectSerializer::toPathValue($newid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewchainCoinGravityMintCollectCreate
     *
     * @param  string $api_version api_version (required)
     * @param  \HepRestApi\Model\CollectMintRequest $data data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\CollectMintResponse
     */
    public function restNewchainCoinGravityMintCollectCreate($api_version, $data)
    {
        list($response) = $this->restNewchainCoinGravityMintCollectCreateWithHttpInfo($api_version, $data);
        return $response;
    }

    /**
     * Operation restNewchainCoinGravityMintCollectCreateWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\CollectMintRequest $data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\CollectMintResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewchainCoinGravityMintCollectCreateWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\CollectMintResponse';
        $request = $this->restNewchainCoinGravityMintCollectCreateRequest($api_version, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\CollectMintResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewchainCoinGravityMintCollectCreateAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\CollectMintRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityMintCollectCreateAsync($api_version, $data)
    {
        return $this->restNewchainCoinGravityMintCollectCreateAsyncWithHttpInfo($api_version, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewchainCoinGravityMintCollectCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\CollectMintRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityMintCollectCreateAsyncWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\CollectMintResponse';
        $request = $this->restNewchainCoinGravityMintCollectCreateRequest($api_version, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewchainCoinGravityMintCollectCreate'
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\CollectMintRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewchainCoinGravityMintCollectCreateRequest($api_version, $data)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewchainCoinGravityMintCollectCreate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling restNewchainCoinGravityMintCollectCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/newchain/coin/gravity/mint/collect/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewchainCoinGravityMintConditionRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $newid newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\MintConditionResponse
     */
    public function restNewchainCoinGravityMintConditionRead($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewchainCoinGravityMintConditionReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewchainCoinGravityMintConditionReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\MintConditionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewchainCoinGravityMintConditionReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\MintConditionResponse';
        $request = $this->restNewchainCoinGravityMintConditionReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\MintConditionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewchainCoinGravityMintConditionReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityMintConditionReadAsync($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewchainCoinGravityMintConditionReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewchainCoinGravityMintConditionReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityMintConditionReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\MintConditionResponse';
        $request = $this->restNewchainCoinGravityMintConditionReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewchainCoinGravityMintConditionRead'
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewchainCoinGravityMintConditionReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        // verify the required parameter 'newid' is set
        if ($newid === null || (is_array($newid) && count($newid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newid when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewchainCoinGravityMintConditionRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewchainCoinGravityMintConditionRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newchain/coin/gravity/mint/condition/{newid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($newid !== null) {
            $resourcePath = str_replace(
                '{' . 'newid' . '}',
                ObjectSerializer::toPathValue($newid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewchainCoinGravityMintDataCurrentRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $newid newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\CurrentDataResponse
     */
    public function restNewchainCoinGravityMintDataCurrentRead($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewchainCoinGravityMintDataCurrentReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewchainCoinGravityMintDataCurrentReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\CurrentDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewchainCoinGravityMintDataCurrentReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\CurrentDataResponse';
        $request = $this->restNewchainCoinGravityMintDataCurrentReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\CurrentDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewchainCoinGravityMintDataCurrentReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityMintDataCurrentReadAsync($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewchainCoinGravityMintDataCurrentReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewchainCoinGravityMintDataCurrentReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityMintDataCurrentReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\CurrentDataResponse';
        $request = $this->restNewchainCoinGravityMintDataCurrentReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewchainCoinGravityMintDataCurrentRead'
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewchainCoinGravityMintDataCurrentReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        // verify the required parameter 'newid' is set
        if ($newid === null || (is_array($newid) && count($newid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newid when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewchainCoinGravityMintDataCurrentRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewchainCoinGravityMintDataCurrentRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newchain/coin/gravity/mint/data/current/{newid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($newid !== null) {
            $resourcePath = str_replace(
                '{' . 'newid' . '}',
                ObjectSerializer::toPathValue($newid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewchainCoinGravityMintDataHistoryCreate
     *
     * @param  string $api_version api_version (required)
     * @param  \HepRestApi\Model\HistoryDataRequest $data data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\HistoryDataResponse
     */
    public function restNewchainCoinGravityMintDataHistoryCreate($api_version, $data)
    {
        list($response) = $this->restNewchainCoinGravityMintDataHistoryCreateWithHttpInfo($api_version, $data);
        return $response;
    }

    /**
     * Operation restNewchainCoinGravityMintDataHistoryCreateWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\HistoryDataRequest $data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\HistoryDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewchainCoinGravityMintDataHistoryCreateWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\HistoryDataResponse';
        $request = $this->restNewchainCoinGravityMintDataHistoryCreateRequest($api_version, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\HistoryDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewchainCoinGravityMintDataHistoryCreateAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\HistoryDataRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityMintDataHistoryCreateAsync($api_version, $data)
    {
        return $this->restNewchainCoinGravityMintDataHistoryCreateAsyncWithHttpInfo($api_version, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewchainCoinGravityMintDataHistoryCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\HistoryDataRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityMintDataHistoryCreateAsyncWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\HistoryDataResponse';
        $request = $this->restNewchainCoinGravityMintDataHistoryCreateRequest($api_version, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewchainCoinGravityMintDataHistoryCreate'
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\HistoryDataRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewchainCoinGravityMintDataHistoryCreateRequest($api_version, $data)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewchainCoinGravityMintDataHistoryCreate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling restNewchainCoinGravityMintDataHistoryCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/newchain/coin/gravity/mint/data/history/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewchainCoinGravityMintSubmitCreate
     *
     * @param  string $api_version api_version (required)
     * @param  \HepRestApi\Model\SubmitMintRequest $data data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\SubmitMintResponse
     */
    public function restNewchainCoinGravityMintSubmitCreate($api_version, $data)
    {
        list($response) = $this->restNewchainCoinGravityMintSubmitCreateWithHttpInfo($api_version, $data);
        return $response;
    }

    /**
     * Operation restNewchainCoinGravityMintSubmitCreateWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\SubmitMintRequest $data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\SubmitMintResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewchainCoinGravityMintSubmitCreateWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\SubmitMintResponse';
        $request = $this->restNewchainCoinGravityMintSubmitCreateRequest($api_version, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\SubmitMintResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewchainCoinGravityMintSubmitCreateAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\SubmitMintRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityMintSubmitCreateAsync($api_version, $data)
    {
        return $this->restNewchainCoinGravityMintSubmitCreateAsyncWithHttpInfo($api_version, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewchainCoinGravityMintSubmitCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\SubmitMintRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravityMintSubmitCreateAsyncWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\SubmitMintResponse';
        $request = $this->restNewchainCoinGravityMintSubmitCreateRequest($api_version, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewchainCoinGravityMintSubmitCreate'
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\SubmitMintRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewchainCoinGravityMintSubmitCreateRequest($api_version, $data)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewchainCoinGravityMintSubmitCreate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling restNewchainCoinGravityMintSubmitCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/newchain/coin/gravity/mint/submit/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewchainCoinGravitySubscriptionConditionRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $newid newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\SubscribeConditionResponse
     */
    public function restNewchainCoinGravitySubscriptionConditionRead($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewchainCoinGravitySubscriptionConditionReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewchainCoinGravitySubscriptionConditionReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\SubscribeConditionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewchainCoinGravitySubscriptionConditionReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\SubscribeConditionResponse';
        $request = $this->restNewchainCoinGravitySubscriptionConditionReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\SubscribeConditionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewchainCoinGravitySubscriptionConditionReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravitySubscriptionConditionReadAsync($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewchainCoinGravitySubscriptionConditionReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewchainCoinGravitySubscriptionConditionReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravitySubscriptionConditionReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\SubscribeConditionResponse';
        $request = $this->restNewchainCoinGravitySubscriptionConditionReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewchainCoinGravitySubscriptionConditionRead'
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewchainCoinGravitySubscriptionConditionReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        // verify the required parameter 'newid' is set
        if ($newid === null || (is_array($newid) && count($newid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newid when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewchainCoinGravitySubscriptionConditionRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewchainCoinGravitySubscriptionConditionRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newchain/coin/gravity/subscription/condition/{newid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($newid !== null) {
            $resourcePath = str_replace(
                '{' . 'newid' . '}',
                ObjectSerializer::toPathValue($newid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewchainCoinGravitySubscriptionSubmitCreate
     *
     * @param  string $api_version api_version (required)
     * @param  \HepRestApi\Model\SubmitSubscribeRequest $data data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\SubmitSubscribeResponse
     */
    public function restNewchainCoinGravitySubscriptionSubmitCreate($api_version, $data)
    {
        list($response) = $this->restNewchainCoinGravitySubscriptionSubmitCreateWithHttpInfo($api_version, $data);
        return $response;
    }

    /**
     * Operation restNewchainCoinGravitySubscriptionSubmitCreateWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\SubmitSubscribeRequest $data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\SubmitSubscribeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewchainCoinGravitySubscriptionSubmitCreateWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\SubmitSubscribeResponse';
        $request = $this->restNewchainCoinGravitySubscriptionSubmitCreateRequest($api_version, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\SubmitSubscribeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewchainCoinGravitySubscriptionSubmitCreateAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\SubmitSubscribeRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravitySubscriptionSubmitCreateAsync($api_version, $data)
    {
        return $this->restNewchainCoinGravitySubscriptionSubmitCreateAsyncWithHttpInfo($api_version, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewchainCoinGravitySubscriptionSubmitCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\SubmitSubscribeRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainCoinGravitySubscriptionSubmitCreateAsyncWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\SubmitSubscribeResponse';
        $request = $this->restNewchainCoinGravitySubscriptionSubmitCreateRequest($api_version, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewchainCoinGravitySubscriptionSubmitCreate'
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\SubmitSubscribeRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewchainCoinGravitySubscriptionSubmitCreateRequest($api_version, $data)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewchainCoinGravitySubscriptionSubmitCreate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling restNewchainCoinGravitySubscriptionSubmitCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/newchain/coin/gravity/subscription/submit/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewchainTxRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $txid txid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\NewchainTransactionResponse
     */
    public function restNewchainTxRead($api_version, $txid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewchainTxReadWithHttpInfo($api_version, $txid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewchainTxReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $txid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\NewchainTransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewchainTxReadWithHttpInfo($api_version, $txid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\NewchainTransactionResponse';
        $request = $this->restNewchainTxReadRequest($api_version, $txid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\NewchainTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewchainTxReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $txid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainTxReadAsync($api_version, $txid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewchainTxReadAsyncWithHttpInfo($api_version, $txid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewchainTxReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $txid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewchainTxReadAsyncWithHttpInfo($api_version, $txid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\NewchainTransactionResponse';
        $request = $this->restNewchainTxReadRequest($api_version, $txid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewchainTxRead'
     *
     * @param  string $api_version (required)
     * @param  string $txid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewchainTxReadRequest($api_version, $txid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewchainTxRead'
            );
        }
        // verify the required parameter 'txid' is set
        if ($txid === null || (is_array($txid) && count($txid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $txid when calling restNewchainTxRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewchainTxRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewchainTxRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewchainTxRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewchainTxRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewchainTxRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewchainTxRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewchainTxRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewchainTxRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewchainTxRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewchainTxRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewchainTxRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewchainTxRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewchainTxRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewchainTxRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewchainTxRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewchainTxRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewchainTxRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewchainTxRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewchainTxRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewchainTxRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewchainTxRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewchainTxRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewchainTxRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewchainTxRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewchainTxRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newchain/tx/{txid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($txid !== null) {
            $resourcePath = str_replace(
                '{' . 'txid' . '}',
                ObjectSerializer::toPathValue($txid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewforceRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $date date (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\NewforceDailyStatsResponse
     */
    public function restNewforceRead($api_version, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewforceReadWithHttpInfo($api_version, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewforceReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $date (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\NewforceDailyStatsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewforceReadWithHttpInfo($api_version, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\NewforceDailyStatsResponse';
        $request = $this->restNewforceReadRequest($api_version, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\NewforceDailyStatsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewforceReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $date (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewforceReadAsync($api_version, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewforceReadAsyncWithHttpInfo($api_version, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewforceReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $date (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewforceReadAsyncWithHttpInfo($api_version, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\NewforceDailyStatsResponse';
        $request = $this->restNewforceReadRequest($api_version, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewforceRead'
     *
     * @param  string $api_version (required)
     * @param  string $date (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewforceReadRequest($api_version, $date, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewforceRead'
            );
        }
        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling restNewforceRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewforceRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewforceRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewforceRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewforceRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewforceRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewforceRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewforceRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewforceRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewforceRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewforceRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewforceRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewforceRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewforceRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewforceRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewforceRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewforceRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewforceRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewforceRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewforceRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewforceRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewforceRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewforceRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewforceRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewforceRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewforceRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newforce/{date}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                '{' . 'date' . '}',
                ObjectSerializer::toPathValue($date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewidsNewforceRewardList
     *
     * @param  string $api_version api_version (required)
     * @param  string $newid newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\NewforceRewardAmountResponse
     */
    public function restNewidsNewforceRewardList($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewidsNewforceRewardListWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewidsNewforceRewardListWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\NewforceRewardAmountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewidsNewforceRewardListWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\NewforceRewardAmountResponse';
        $request = $this->restNewidsNewforceRewardListRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\NewforceRewardAmountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewidsNewforceRewardListAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewidsNewforceRewardListAsync($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewidsNewforceRewardListAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewidsNewforceRewardListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewidsNewforceRewardListAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\NewforceRewardAmountResponse';
        $request = $this->restNewidsNewforceRewardListRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewidsNewforceRewardList'
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewidsNewforceRewardListRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewidsNewforceRewardList'
            );
        }
        // verify the required parameter 'newid' is set
        if ($newid === null || (is_array($newid) && count($newid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newid when calling restNewidsNewforceRewardList'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewidsNewforceRewardList'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewidsNewforceRewardList, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewidsNewforceRewardList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewidsNewforceRewardList'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewidsNewforceRewardList, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewidsNewforceRewardList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewidsNewforceRewardList'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewidsNewforceRewardList, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewidsNewforceRewardList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewidsNewforceRewardList'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewidsNewforceRewardList'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewidsNewforceRewardList, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewidsNewforceRewardList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewidsNewforceRewardList'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewidsNewforceRewardList, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewidsNewforceRewardList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewidsNewforceRewardList'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewidsNewforceRewardList, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewidsNewforceRewardList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewidsNewforceRewardList'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewidsNewforceRewardList, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewidsNewforceRewardList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewidsNewforceRewardList'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewidsNewforceRewardList, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewidsNewforceRewardList, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newids/{newid}/newforce/reward/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($newid !== null) {
            $resourcePath = str_replace(
                '{' . 'newid' . '}',
                ObjectSerializer::toPathValue($newid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewforceTokensList
     *
     * @param  string $api_version api_version (required)
     * @param  string $newid newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\NewforceRewardAmountResponse
     */
    public function restNewforceTokensList($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewforceTokensListWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewforceTokensListWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\NewforceRewardAmountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewforceTokensListWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\NewforceRewardAmountResponse';
        $request = $this->restNewforceTokensListRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\NewforceRewardAmountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewforceTokensListAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewforceTokensListAsync($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewforceTokensListAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewforceTokensListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewforceTokensListAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\NewforceRewardAmountResponse';
        $request = $this->restNewforceTokensListRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewforceTokensList'
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewforceTokensListRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewforceTokensList'
            );
        }
        // verify the required parameter 'newid' is set
        if ($newid === null || (is_array($newid) && count($newid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newid when calling restNewforceTokensList'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewforceTokensList'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewforceTokensList, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewforceTokensList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewforceTokensList'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewforceTokensList, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewforceTokensList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewforceTokensList'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewforceTokensList, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewforceTokensList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewforceTokensList'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewforceTokensList'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewforceTokensList, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewforceTokensList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewforceTokensList'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewforceTokensList, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewforceTokensList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewforceTokensList'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewforceTokensList, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewforceTokensList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewforceTokensList'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewforceTokensList, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewforceTokensList, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewforceTokensList'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewforceTokensList, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewforceTokensList, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newforce/{newid}/tokens/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($newid !== null) {
            $resourcePath = str_replace(
                '{' . 'newid' . '}',
                ObjectSerializer::toPathValue($newid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewidsRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $newid newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\NewidResponse
     */
    public function restNewidsRead($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewidsReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewidsReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\NewidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewidsReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\NewidResponse';
        $request = $this->restNewidsReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\NewidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewidsReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewidsReadAsync($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewidsReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewidsReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewidsReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\NewidResponse';
        $request = $this->restNewidsReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewidsRead'
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewidsReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewidsRead'
            );
        }
        // verify the required parameter 'newid' is set
        if ($newid === null || (is_array($newid) && count($newid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newid when calling restNewidsRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewidsRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewidsRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewidsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewidsRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewidsRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewidsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewidsRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewidsRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewidsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewidsRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewidsRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewidsRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewidsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewidsRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewidsRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewidsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewidsRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewidsRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewidsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewidsRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewidsRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewidsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewidsRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewidsRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewidsRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newids/{newid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($newid !== null) {
            $resourcePath = str_replace(
                '{' . 'newid' . '}',
                ObjectSerializer::toPathValue($newid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewnetCachesAuthCreate
     *
     * @param  string $api_version api_version (required)
     * @param  \HepRestApi\Model\AuthCacheRequest $data data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\CreateAuthCacheResponse
     */
    public function restNewnetCachesAuthCreate($api_version, $data)
    {
        list($response) = $this->restNewnetCachesAuthCreateWithHttpInfo($api_version, $data);
        return $response;
    }

    /**
     * Operation restNewnetCachesAuthCreateWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\AuthCacheRequest $data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\CreateAuthCacheResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewnetCachesAuthCreateWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\CreateAuthCacheResponse';
        $request = $this->restNewnetCachesAuthCreateRequest($api_version, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\CreateAuthCacheResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewnetCachesAuthCreateAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\AuthCacheRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesAuthCreateAsync($api_version, $data)
    {
        return $this->restNewnetCachesAuthCreateAsyncWithHttpInfo($api_version, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewnetCachesAuthCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\AuthCacheRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesAuthCreateAsyncWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\CreateAuthCacheResponse';
        $request = $this->restNewnetCachesAuthCreateRequest($api_version, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewnetCachesAuthCreate'
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\AuthCacheRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewnetCachesAuthCreateRequest($api_version, $data)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewnetCachesAuthCreate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling restNewnetCachesAuthCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/newnet/caches/auth/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewnetCachesAuthRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $auth_hash auth_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\AuthCacheResponse
     */
    public function restNewnetCachesAuthRead($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewnetCachesAuthReadWithHttpInfo($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewnetCachesAuthReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $auth_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\AuthCacheResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewnetCachesAuthReadWithHttpInfo($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\AuthCacheResponse';
        $request = $this->restNewnetCachesAuthReadRequest($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\AuthCacheResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewnetCachesAuthReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $auth_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesAuthReadAsync($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewnetCachesAuthReadAsyncWithHttpInfo($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewnetCachesAuthReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $auth_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesAuthReadAsyncWithHttpInfo($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\AuthCacheResponse';
        $request = $this->restNewnetCachesAuthReadRequest($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewnetCachesAuthRead'
     *
     * @param  string $api_version (required)
     * @param  string $auth_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewnetCachesAuthReadRequest($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'auth_hash' is set
        if ($auth_hash === null || (is_array($auth_hash) && count($auth_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_hash when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewnetCachesAuthRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewnetCachesAuthRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewnetCachesAuthRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewnetCachesAuthRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewnetCachesAuthRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewnetCachesAuthRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewnetCachesAuthRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewnetCachesAuthRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewnetCachesAuthRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewnetCachesAuthRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewnetCachesAuthRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewnetCachesAuthRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewnetCachesAuthRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewnetCachesAuthRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewnetCachesAuthRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewnetCachesAuthRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewnetCachesAuthRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewnetCachesAuthRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewnetCachesAuthRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewnetCachesAuthRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewnetCachesAuthRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewnetCachesAuthRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewnetCachesAuthRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewnetCachesAuthRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newnet/caches/auth/{auth_hash}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($auth_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'auth_hash' . '}',
                ObjectSerializer::toPathValue($auth_hash),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewnetCachesPayCreate
     *
     * @param  string $api_version api_version (required)
     * @param  \HepRestApi\Model\PayCacheRequest $data data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\CreatePayCacheResponse
     */
    public function restNewnetCachesPayCreate($api_version, $data)
    {
        list($response) = $this->restNewnetCachesPayCreateWithHttpInfo($api_version, $data);
        return $response;
    }

    /**
     * Operation restNewnetCachesPayCreateWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\PayCacheRequest $data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\CreatePayCacheResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewnetCachesPayCreateWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\CreatePayCacheResponse';
        $request = $this->restNewnetCachesPayCreateRequest($api_version, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\CreatePayCacheResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewnetCachesPayCreateAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\PayCacheRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesPayCreateAsync($api_version, $data)
    {
        return $this->restNewnetCachesPayCreateAsyncWithHttpInfo($api_version, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewnetCachesPayCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\PayCacheRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesPayCreateAsyncWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\CreatePayCacheResponse';
        $request = $this->restNewnetCachesPayCreateRequest($api_version, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewnetCachesPayCreate'
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\PayCacheRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewnetCachesPayCreateRequest($api_version, $data)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewnetCachesPayCreate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling restNewnetCachesPayCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/newnet/caches/pay/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewnetCachesPayRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $pay_hash pay_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\PayCacheResponse
     */
    public function restNewnetCachesPayRead($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restNewnetCachesPayReadWithHttpInfo($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restNewnetCachesPayReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $pay_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\PayCacheResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewnetCachesPayReadWithHttpInfo($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\PayCacheResponse';
        $request = $this->restNewnetCachesPayReadRequest($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\PayCacheResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewnetCachesPayReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $pay_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesPayReadAsync($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restNewnetCachesPayReadAsyncWithHttpInfo($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewnetCachesPayReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $pay_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesPayReadAsyncWithHttpInfo($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\PayCacheResponse';
        $request = $this->restNewnetCachesPayReadRequest($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewnetCachesPayRead'
     *
     * @param  string $api_version (required)
     * @param  string $pay_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewnetCachesPayReadRequest($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'pay_hash' is set
        if ($pay_hash === null || (is_array($pay_hash) && count($pay_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_hash when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewnetCachesPayRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewnetCachesPayRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restNewnetCachesPayRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewnetCachesPayRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewnetCachesPayRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restNewnetCachesPayRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewnetCachesPayRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewnetCachesPayRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restNewnetCachesPayRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewnetCachesPayRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewnetCachesPayRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restNewnetCachesPayRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewnetCachesPayRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewnetCachesPayRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restNewnetCachesPayRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewnetCachesPayRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewnetCachesPayRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restNewnetCachesPayRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restNewnetCachesPayRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewnetCachesPayRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restNewnetCachesPayRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restNewnetCachesPayRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewnetCachesPayRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restNewnetCachesPayRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/newnet/caches/pay/{pay_hash}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($pay_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'pay_hash' . '}',
                ObjectSerializer::toPathValue($pay_hash),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOraclesRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $oracle_id oracle_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\RetrieveOracleResponse
     */
    public function restOraclesRead($api_version, $oracle_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restOraclesReadWithHttpInfo($api_version, $oracle_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restOraclesReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $oracle_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\RetrieveOracleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restOraclesReadWithHttpInfo($api_version, $oracle_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\RetrieveOracleResponse';
        $request = $this->restOraclesReadRequest($api_version, $oracle_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\RetrieveOracleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOraclesReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $oracle_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restOraclesReadAsync($api_version, $oracle_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restOraclesReadAsyncWithHttpInfo($api_version, $oracle_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOraclesReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $oracle_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restOraclesReadAsyncWithHttpInfo($api_version, $oracle_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\RetrieveOracleResponse';
        $request = $this->restOraclesReadRequest($api_version, $oracle_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOraclesRead'
     *
     * @param  string $api_version (required)
     * @param  string $oracle_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restOraclesReadRequest($api_version, $oracle_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restOraclesRead'
            );
        }
        // verify the required parameter 'oracle_id' is set
        if ($oracle_id === null || (is_array($oracle_id) && count($oracle_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oracle_id when calling restOraclesRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restOraclesRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restOraclesRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restOraclesRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restOraclesRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restOraclesRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restOraclesRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restOraclesRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restOraclesRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restOraclesRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restOraclesRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restOraclesRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restOraclesRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restOraclesRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restOraclesRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restOraclesRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restOraclesRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restOraclesRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restOraclesRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restOraclesRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restOraclesRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restOraclesRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restOraclesRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restOraclesRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restOraclesRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restOraclesRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/oracles/{oracle_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($oracle_id !== null) {
            $resourcePath = str_replace(
                '{' . 'oracle_id' . '}',
                ObjectSerializer::toPathValue($oracle_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restProofsCreate
     *
     * @param  string $api_version api_version (required)
     * @param  \HepRestApi\Model\CreateProofRequest $data data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\CreateProofResponse
     */
    public function restProofsCreate($api_version, $data)
    {
        list($response) = $this->restProofsCreateWithHttpInfo($api_version, $data);
        return $response;
    }

    /**
     * Operation restProofsCreateWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\CreateProofRequest $data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\CreateProofResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restProofsCreateWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\CreateProofResponse';
        $request = $this->restProofsCreateRequest($api_version, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\CreateProofResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restProofsCreateAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\CreateProofRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsCreateAsync($api_version, $data)
    {
        return $this->restProofsCreateAsyncWithHttpInfo($api_version, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restProofsCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\CreateProofRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsCreateAsyncWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\CreateProofResponse';
        $request = $this->restProofsCreateRequest($api_version, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restProofsCreate'
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\CreateProofRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restProofsCreateRequest($api_version, $data)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restProofsCreate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling restProofsCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/proofs/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restProofsDelete
     *
     * @param  string $api_version api_version (required)
     * @param  string $proof_hash proof_hash (required)
     * @param  \HepRestApi\Model\CancelProofRequest $data data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\CancelProofResponse
     */
    public function restProofsDelete($api_version, $proof_hash, $data)
    {
        list($response) = $this->restProofsDeleteWithHttpInfo($api_version, $proof_hash, $data);
        return $response;
    }

    /**
     * Operation restProofsDeleteWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     * @param  \HepRestApi\Model\CancelProofRequest $data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\CancelProofResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restProofsDeleteWithHttpInfo($api_version, $proof_hash, $data)
    {
        $returnType = '\HepRestApi\Model\CancelProofResponse';
        $request = $this->restProofsDeleteRequest($api_version, $proof_hash, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\CancelProofResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restProofsDeleteAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     * @param  \HepRestApi\Model\CancelProofRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsDeleteAsync($api_version, $proof_hash, $data)
    {
        return $this->restProofsDeleteAsyncWithHttpInfo($api_version, $proof_hash, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restProofsDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     * @param  \HepRestApi\Model\CancelProofRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsDeleteAsyncWithHttpInfo($api_version, $proof_hash, $data)
    {
        $returnType = '\HepRestApi\Model\CancelProofResponse';
        $request = $this->restProofsDeleteRequest($api_version, $proof_hash, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restProofsDelete'
     *
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     * @param  \HepRestApi\Model\CancelProofRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restProofsDeleteRequest($api_version, $proof_hash, $data)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restProofsDelete'
            );
        }
        // verify the required parameter 'proof_hash' is set
        if ($proof_hash === null || (is_array($proof_hash) && count($proof_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proof_hash when calling restProofsDelete'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling restProofsDelete'
            );
        }

        $resourcePath = '/rest/v{api_version}/proofs/{proof_hash}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($proof_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'proof_hash' . '}',
                ObjectSerializer::toPathValue($proof_hash),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restProofsRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $proof_hash proof_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\ProofResponse
     */
    public function restProofsRead($api_version, $proof_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        list($response) = $this->restProofsReadWithHttpInfo($api_version, $proof_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);
        return $response;
    }

    /**
     * Operation restProofsReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\ProofResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restProofsReadWithHttpInfo($api_version, $proof_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\ProofResponse';
        $request = $this->restProofsReadRequest($api_version, $proof_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\ProofResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restProofsReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsReadAsync($api_version, $proof_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        return $this->restProofsReadAsyncWithHttpInfo($api_version, $proof_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restProofsReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsReadAsyncWithHttpInfo($api_version, $proof_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        $returnType = '\HepRestApi\Model\ProofResponse';
        $request = $this->restProofsReadRequest($api_version, $proof_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restProofsRead'
     *
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#39;HEP&#39;. (required)
     * @param  string $version The protocol version such as &#39;1.0&#39; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $dapp_signature_method The signature method used by dapp. (required)
     * @param  string $dapp_signature The signature generated by dapp. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restProofsReadRequest($api_version, $proof_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $dapp_signature_method, $dapp_signature)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restProofsRead'
            );
        }
        // verify the required parameter 'proof_hash' is set
        if ($proof_hash === null || (is_array($proof_hash) && count($proof_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proof_hash when calling restProofsRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restProofsRead'
            );
        }
        if (strlen($dapp_key) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restProofsRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_key) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_key" when calling RestApi.restProofsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restProofsRead'
            );
        }
        if (strlen($protocol) > 10) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restProofsRead, must be smaller than or equal to 10.');
        }
        if (strlen($protocol) < 1) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling RestApi.restProofsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restProofsRead'
            );
        }
        if (strlen($version) > 10) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restProofsRead, must be smaller than or equal to 10.');
        }
        if (strlen($version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$version" when calling RestApi.restProofsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restProofsRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restProofsRead'
            );
        }
        if (strlen($nonce) > 64) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restProofsRead, must be smaller than or equal to 64.');
        }
        if (strlen($nonce) < 1) {
            throw new \InvalidArgumentException('invalid length for "$nonce" when calling RestApi.restProofsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restProofsRead'
            );
        }
        if (strlen($os) > 10) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restProofsRead, must be smaller than or equal to 10.');
        }
        if (strlen($os) < 1) {
            throw new \InvalidArgumentException('invalid length for "$os" when calling RestApi.restProofsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restProofsRead'
            );
        }
        if (strlen($language) > 10) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restProofsRead, must be smaller than or equal to 10.');
        }
        if (strlen($language) < 1) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling RestApi.restProofsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature_method' is set
        if ($dapp_signature_method === null || (is_array($dapp_signature_method) && count($dapp_signature_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature_method when calling restProofsRead'
            );
        }
        if (strlen($dapp_signature_method) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restProofsRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature_method) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature_method" when calling RestApi.restProofsRead, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'dapp_signature' is set
        if ($dapp_signature === null || (is_array($dapp_signature) && count($dapp_signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_signature when calling restProofsRead'
            );
        }
        if (strlen($dapp_signature) > 64) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restProofsRead, must be smaller than or equal to 64.');
        }
        if (strlen($dapp_signature) < 1) {
            throw new \InvalidArgumentException('invalid length for "$dapp_signature" when calling RestApi.restProofsRead, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rest/v{api_version}/proofs/{proof_hash}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($dapp_signature_method !== null) {
            $queryParams['dapp_signature_method'] = ObjectSerializer::toQueryValue($dapp_signature_method);
        }
        // query params
        if ($dapp_signature !== null) {
            $queryParams['dapp_signature'] = ObjectSerializer::toQueryValue($dapp_signature);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($proof_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'proof_hash' . '}',
                ObjectSerializer::toPathValue($proof_hash),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restProofsReceiptsCreate
     *
     * @param  string $api_version api_version (required)
     * @param  \HepRestApi\Model\RetrieveProofReceiptsRequest $data data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\RetrieveProofReceiptsResponse
     */
    public function restProofsReceiptsCreate($api_version, $data)
    {
        list($response) = $this->restProofsReceiptsCreateWithHttpInfo($api_version, $data);
        return $response;
    }

    /**
     * Operation restProofsReceiptsCreateWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\RetrieveProofReceiptsRequest $data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\RetrieveProofReceiptsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restProofsReceiptsCreateWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\RetrieveProofReceiptsResponse';
        $request = $this->restProofsReceiptsCreateRequest($api_version, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\RetrieveProofReceiptsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restProofsReceiptsCreateAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\RetrieveProofReceiptsRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsReceiptsCreateAsync($api_version, $data)
    {
        return $this->restProofsReceiptsCreateAsyncWithHttpInfo($api_version, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restProofsReceiptsCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\RetrieveProofReceiptsRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsReceiptsCreateAsyncWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\RetrieveProofReceiptsResponse';
        $request = $this->restProofsReceiptsCreateRequest($api_version, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restProofsReceiptsCreate'
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\RetrieveProofReceiptsRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restProofsReceiptsCreateRequest($api_version, $data)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restProofsReceiptsCreate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling restProofsReceiptsCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/proofs/receipts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restProofsRewardsCreate
     *
     * @param  string $api_version api_version (required)
     * @param  \HepRestApi\Model\RetrieveProofRewardsRequest $data data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HepRestApi\Model\RetrieveProofRewardsResponse
     */
    public function restProofsRewardsCreate($api_version, $data)
    {
        list($response) = $this->restProofsRewardsCreateWithHttpInfo($api_version, $data);
        return $response;
    }

    /**
     * Operation restProofsRewardsCreateWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\RetrieveProofRewardsRequest $data (required)
     *
     * @throws \HepRestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HepRestApi\Model\RetrieveProofRewardsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restProofsRewardsCreateWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\RetrieveProofRewardsResponse';
        $request = $this->restProofsRewardsCreateRequest($api_version, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HepRestApi\Model\RetrieveProofRewardsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restProofsRewardsCreateAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\RetrieveProofRewardsRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsRewardsCreateAsync($api_version, $data)
    {
        return $this->restProofsRewardsCreateAsyncWithHttpInfo($api_version, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restProofsRewardsCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\RetrieveProofRewardsRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsRewardsCreateAsyncWithHttpInfo($api_version, $data)
    {
        $returnType = '\HepRestApi\Model\RetrieveProofRewardsResponse';
        $request = $this->restProofsRewardsCreateRequest($api_version, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restProofsRewardsCreate'
     *
     * @param  string $api_version (required)
     * @param  \HepRestApi\Model\RetrieveProofRewardsRequest $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restProofsRewardsCreateRequest($api_version, $data)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restProofsRewardsCreate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling restProofsRewardsCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/proofs/rewards/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
